* Definitions are mapped to exercises
** TODO Iteration 1

~M-x total-recall~ â‡’ Print report, simulate the rest.

** TODO Iteration 2

Implement Searcher

** TODO Iteration 3

Implement Planner

** TODO Iteration 4

Implement UI

** TODO Iteration 5

Implement DB

** TODO â– 

*Proposition*

After ~M-x total-recall~, all definitions and exercises under a given directory have
been reviewed. Execution report summary has been written to minibuffer while the
report has been written to a dedicated report buffer.

- Definition#mk : Id Content Perspective â†’ Definition
  - Ï€#id() : Id
  - Ï€#content() : Content
  - Ï€#perspective() : Perspective

- Exercise#mk : Id Question Answer Perspective â†’ Exercise
  - Ï€#id() : Id
  - Ï€#question() : Question
  - Ï€#answer() : Answer
  - Ï€#perspective() : Perspective

- Id#mk : String â†’ Id
  - Ï€#string() : String

- Content#mk : String â†’ Content
  - Ï€#string() : String

- Perspective#mk : List(String) â†’ Perspective
  - Ï€#strings() : List(String)

- Question#mk : String â†’ Content
  - Ï€#string() : String

- Answer#mk : String â†’ Content
  - Ï€#string() : String

- Â« â€¦ has been reviewed Â» :â‰¡ ðŸžŽ

- to_exercise : Definition â†’ Exercise
  - Î» def :â‰¡ Exercise#mk def#id() "Definition?" def#content() def#perspective()


*Algorithm*

total-recall() : Proposition :â‰¡
  1. db-path : FilePath
  2. root : DirPath
  3. io-buffer : Name
  4. total-recall :â‰¡ TotalRecall#mk root db-path
  5. io :â‰¡ IO#mk io-buffer
  1. report :â‰¡ total-recall#start()
  2. io#print-to-buffer report#string()
  3. io#minibuffer "total-recall execution finished. Report written to #{io#buffer()}".


- FilePath :â‰¡ Path of a directory in the local file-system.


- DirPath :â‰¡ Path of a directory in the local file-system.


- IO#mk : Name â†’ IO
  - Ï€#print-to-buffer : String â†’ IO
  - Ï€#print-to-minibuffer : String â†’ IO
  - Ï€#buffer() : Buffer


- TotalRecall#mk : root:DirPath db-path:FilePath â†’ TotalRecall
  - Ï€#start() : Report :â‰¡
    1. searcher :â‰¡ Searcher#mk root
    2. db :â‰¡ DB#mk db-path
    3. ui :â‰¡ UI#mk()
    4. planner :â‰¡ Planner#mk db
    5. files-counter : Nat :â‰¡ 0
    6. exercises-counter : Nat :â‰¡ 0
    7. report :â‰¡ Report#mk()
    8. report#add "TotalRecall started."
    9. report#add "Definitions and exercises under #{root} will be reviewed."
    10. report#add "Review results will be saved in #{db-path}."
    11. files :â‰¡ searcher#files()
    12. Ï€#next-file()

  - Ï€#next-file() : Report :â‰¡
    - match files
      - [ ] â†’ Ï€#stop()
      - [file-path] + rest â†’
        1. files :â‰¡ rest
        2. report#add "Reviewing exercises from file: #{file-path}."
        3. exercises :â‰¡ planner#exercises file-path
        4. Ï€#next-exercise()

  - Ï€#next-exercise() : Report :â‰¡
    - match exercises
      - [ ] â†’
        1. files-counter :â‰¡ files-counter + 1
        2. Ï€#next-file()
      - [exercise] + rest â†’
        1. exercises :â‰¡ rest
        2. report#add "Reviewing exercise: #{string-join(exercise#path())}."
        3. match ui#show exercise
           - 'stop â†’ Ï€#stop()
           - rating : Rating â†’
             1. exercises-counter :â‰¡ exercises-counter + 1
             2. db#save exercise rating
             3. Ï€#next-exercise()

  - Ï€#stop() : Report :â‰¡
    1. db#stop()
    2. report#add "Reviewing process is finished."
    3. report#add "#{exercises-counter} exercises or definitions have been reviewed from #{files-counter} files."
    4. report

- Report#mk() : Report
  - Ï€#string() : String
  - Ï€#add : String â†’ Report

- DB#mk : FilePath â†’ DB
  - Ï€#save : Exercise Rating â†’ DB
  - Ï€#stop() : 'ok

- Searcher#mk : root:DirPath â†’ Searcher
  - Ï€#files() : List(ContentFile(root))

- Planner#mk : DB â†’ Planner
  - Ï€#exercises : FilePath â†’ List(Exercise)

- UI#mk : UI
  - Ï€#show : Exercise â†’ Rating | 'stop


- Id
- Question

- Answer
- Rating#mk : Rating

- ContentFile(root:DirPath) :â‰¡ FilePath prefixed by root that contains at least one definition or exercise.
