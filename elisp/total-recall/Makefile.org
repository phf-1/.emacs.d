#+PROPERTY: header-args :noweb yes :mkdirp yes :tangle Makefile

* Specification

- After ~make deps~ : The development environment dependencies specification is built.
- After ~make env~ : The development environement is active.
- After ~make el~ : total-recall.el is built.
- After ~make lint~ : total-recall.el has been linted and report written.
- After ~make checkdoc~ : Docstrings of total-recall.el have been checked and report written.
- After ~make elc~ : total-recall.el has been compiled.
- After ~make test~ : total-recall.el has been tested and report written.
- After ~make all~ : Assuming that the development environment is active, all of the above.
- After ~make clean~ : Delete all generated files.

* Implementation
** Configuration

#+begin_src makefile
SHELL := bash
.SHELLFLAGS := -ceuo pipefail
MAKEFLAGS += --no-print-directory
.ONESHELL:
.SILENT:
#+end_src

** _build

#+begin_src makefile
BUILD := ${PWD}/_build
${BUILD}:
	mkdir -p $@
#+end_src

** deps

#+begin_src makefile
.PHONY: deps
PACKAGES_SCM := ${BUILD}/packages.scm
deps: ${PACKAGES_SCM}
${PACKAGES_SCM}: packages.org | ${BUILD}
	emacs -Q --batch --file "$<" --eval '(org-babel-tangle)'
	mv packages.scm "$@"
	echo "$@"
#+end_src

** env

#+begin_src makefile
.PHONY: env
GUIX := guix
GUIX_SHELL := ${GUIX} shell --container \
	-F \
	--file=${PACKAGES_SCM} \
	--preserve='^TERM$$' \
	-- bash --init-file init.bash
env: ${PACKAGES_SCM} | ${BUILD}
	echo 'export LC_ALL=en_US.UTF-8' >init.bash
	CMD="${CMD}"
	if [[ ! -v GUIX_ENVIRONMENT ]]; then
	  if [[ "$${CMD}" == "" ]]; then
	    ${GUIX_SHELL} -i;
	  else
	    ${GUIX_SHELL} -c "${CMD}";
	  fi
	else
	  ${CMD}
	  :
	fi
#+end_src

** el

#+begin_src makefile
.PHONY: el
TOTAL_RECALL_EL := ${BUILD}/total-recall.el
TOTAL_RECALL_TEST_EL := ${BUILD}/total-recall-test.el
el: ${TOTAL_RECALL_EL}
${TOTAL_RECALL_EL}: solution.org solution-test.org | ${BUILD}
	emacs -Q --batch --file "$<" --eval '(org-babel-tangle)'
	mv total-recall.el "$@"
	mv total-recall-test.el "${TOTAL_RECALL_TEST_EL}"
	echo "$@"
	echo "${TOTAL_RECALL_TEST_EL}"
#+end_src

** lint

#+begin_src makefile
.PHONY: lint
LINT_REPORT := ${BUILD}/lint-report.txt
lint: ${LINT_REPORT}
${LINT_REPORT}: ${TOTAL_RECALL_EL}
	emacs --batch --dir "${BUILD}" \
	--file "$<" \
	--eval '(setq org-id-track-globally nil)' \
	--eval "(progn (require 'package-lint) (let ((errors (package-lint-buffer))) (when errors (message \"%s\" errors))))" 2>&1 | tee "$@"
	echo "$@"
#+end_src

** elc

#+begin_src makefile
.PHONY: elc
TOTAL_RECALL_ELC := ${BUILD}/total-recall.elc
elc: ${TOTAL_RECALL_ELC}
${TOTAL_RECALL_ELC}: ${TOTAL_RECALL_EL}
	emacs -Q --dir "${BUILD}" --batch \
	--eval '(setq org-id-track-globally nil)' \
	--eval '(defun reb-target-binding (_sym) (error "pcre2el v1.11"))' \
	-f batch-byte-compile "$<"
	echo "$@"
#+end_src

** checkdoc

#+begin_src makefile
.PHONY: checkdoc
CHECKDOC := ${BUILD}/checkdoc-report.txt
checkdoc: ${CHECKDOC}
${CHECKDOC}: ${TOTAL_RECALL_EL}
	emacs -Q --batch \
	--eval '(setq org-id-track-globally nil)' \
	--eval '(checkdoc-file "$<")' 2>&1 | tee "$@"
	echo "$@"
#+end_src

** test

#+begin_src makefile
.PHONY: test
TEST := ${BUILD}/test-report.txt
test: ${TEST}
${TEST}: ${TOTAL_RECALL_EL}
	emacs -Q --batch \
	--eval '(setq org-id-track-globally nil)' \
	--eval '(load-file "${TOTAL_RECALL_EL}")' \
	--eval '(load-file "${TOTAL_RECALL_TEST_EL}")' \
	--eval '(ert-run-tests-batch-and-exit t)' 2>&1 | tee "$@"
	echo "$@"
#+end_src

** all

#+begin_src makefile
.PHONY: all
all:
	${MAKE} el
	${MAKE} lint
	${MAKE} checkdoc
	${MAKE} elc
	${MAKE} test
#+end_src

** clean

#+begin_src makefile
.PHONY: clean
clean:
	rm -rfv ${BUILD}
#+end_src
