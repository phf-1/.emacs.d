#+PROPERTY: header-args :noweb yes :mkdirp yes

* Objective
:PROPERTIES:
:ID:       2b6a2d42-bfd0-4658-b25a-b1b7000d1b01
:END:

#+name: commentary
#+begin_src org
This package provides `total-recall'.

The command `M-x total-recall' uses Ripgrep to search for Org files in
the directory set by `total-recall-root-dir' that contain
exercises. It lists the exercises from each file and provides a user
interface to view them. The list of exercises follows a depth first
order /i.e./ a bottom-up review order.

Each exercise displays its question first, followed by the answer. The
user's performance—whether they answered correctly—is recorded in an
SQLite database at `total-recall-database'. This data determines when
an exercise should be reviewed next.

An exercise is any Org file heading that meets these criteria:
- Has a `TYPE' property set to `total-recall-type-id'.
- Has an `ID' property with a UUID value.
- Contains two subheadings:
  - The first subheading is the question.
  - The second subheading is the answer.
- Is located in `total-recall-root-dir'.

Example of an exercise:

,#+begin_src org
,* Emacs
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: ced2b42b-bfba-4af5-913c-9d903ac78433
:END:

,** What is GNU Emacs?

[optional content]

,** Answer

An extensible, customizable, free/libre text editor—and more. Its core
is an interpreter for Emacs Lisp, a Lisp dialect with extensions for
text editing.
,#+end_src

Exercises can be embedded in any Org Mode document for context:

,#+begin_src org
,* Title
,** Section
,*** Sub-section
,**** Q&A
,***** Exercise 1
,***** Exercise 2
,*** Q&A
,**** Exercise 3
,**** Exercise 4
,#+end_src

which would lead to this review order:

1) Title/Section/Sub-section/Q&A/Exercise 1
2) Title/Section/Sub-section/Q&A/Exercise 2
3) Title/Section/Q&A/Exercise 3
4) Title/Section/Q&A/Exercise 4

which may be pruned by the scheduling algorithm to:

1) Title/Section/Sub-section/Q&A/Exercise 1
2) Title/Section/Q&A/Exercise 4

depending on accumulated data so far.
#+end_src

* tangle-heading
:PROPERTIES:
:header-args+: :tangle tangle-heading :shebang "#!/usr/bin/env -S emacs --script"
:END:

- ~./tangle-heading file.org file.el directory~
  - Give ~file.org~
  - tangles the heading named ~file.el~ into ~./file.el~
  - moves the resulting file under ~directory~

#+begin_src emacs-lisp
(require 'org)
(require 'ob-core)

(setq org-id-track-globally nil)

;; Set Scheme implementation to Guile
(require 'ob-scheme)
(setq-default geiser-scheme-implementation 'guile)

(setq make-backup-files nil)
(setq auto-save-default nil)

(defun user--org-remove-property-drawers ()
  "After tangling, remove all :PROPERTIES: drawers."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^.*:PROPERTIES:$" nil t)
      (let ((start (line-beginning-position)))
        (when (re-search-forward "^.*:END:\n" nil t)
          (delete-region start (point)))))
    (when (buffer-modified-p)
      (save-buffer))))
(add-hook 'org-babel-post-tangle-hook #'user--org-remove-property-drawers)

(defun org-babel-spec-to-string (spec)
  "Insert SPEC into the current file.

Insert the source-code specified by SPEC into the current source
code file.  This function uses `comment-region' which assumes
that the appropriate major-mode is set.  SPEC has the form:

  (start-line file link source-name params body comment)"
  (pcase-let*
      ((`(,start ,file ,link ,source ,info ,body ,comment) spec)
       (comments (cdr (assq :comments info)))
       (link? (or (string= comments "both") (string= comments "link")
                  (string= comments "yes") (string= comments "noweb")))
       (link-data `(("start-line" . ,(number-to-string start))
                    ("file" . ,file)
                    ("link" . ,link)
                    ("source-name" . ,source)))
       (insert-comment (lambda (text)
                         (when (and comments
                                    (not (string= comments "no"))
                                    (org-string-nw-p text))
                           (if org-babel-tangle-uncomment-comments
                               ;; Plain comments: no processing.
                               (insert text)
                             ;; Ensure comments are made to be comments.  Also ignore
                             ;; invisible characters when commenting.
                             (comment-region
                              (point)
                              (progn (insert (org-no-properties text))
                                     (point))))))))
    (when comment (funcall insert-comment comment))
    (when link?
      (funcall insert-comment
               (org-fill-template
                org-babel-tangle-comment-format-beg link-data)))
    (insert body "\n")
    (when link?
      (funcall insert-comment
               (org-fill-template
                org-babel-tangle-comment-format-end link-data)))))

(defun tangle-headline-to-dest (name dest)
  (let (pos)
    (when (not (file-directory-p dest)) (error "Destination directory `%s' does not exist." dest))
    (org-with-wide-buffer
     (save-excursion
       (setq pos (org-find-exact-headline-in-buffer name (current-buffer) t))
       (when (null pos) (error "Heading named `%s' not found." name))
       (goto-char pos)
       (org-narrow-to-subtree)
       (org-babel-tangle)
       (when (not (file-exists-p name)) (error "Tangling `%s' did not build matching file." name))
       (rename-file name (concat (file-name-as-directory dest) name) t)))))

;; Silence messages.
(fset 'message (lambda (&rest args) nil))

(let ((org-file (pop argv))
      (heading-name (pop argv))
      (dest-dir (pop argv)))
  (with-current-buffer (find-file-noselect org-file)
    (tangle-headline-to-dest heading-name dest-dir)))
#+end_src

* packages.scm
:PROPERTIES:
:header-args+: :tangle packages.scm
:END:

- List of Guix packages.

** locale

- Guix package that provides utf8 locale.

#+name: locale
#+begin_src scheme
(use-modules (gnu packages base))
(define locale
  (make-glibc-utf8-locales
   glibc
   #:locales (list "en_US")
   #:name "glibc-en-utf8-locales"))
#+end_src

** elisp-packages

- List of Elisp guix packages.

#+name: elisp-packages
#+begin_src scheme
(use-modules (gnu packages emacs-xyz))
(define elisp-packages (list emacs-package-lint))
#+end_src

** binaries

- List of Guix packages that provides binaries.

#+name: binaries
#+begin_src scheme
(use-modules
 (gnu packages base)
 (gnu packages bash)
 (gnu packages emacs)
 (gnu packages rust-apps)
 (gnu packages certs)
 (gnu packages admin)
 (gnu packages build-tools))

(define binaries
  (list

   ;; build dependencies
   ;; bash-minimal
   bash
   coreutils
   gnu-make
   emacs
   sed
   nss-certs

   ;; runtime dependencies
   ripgrep
   fd))
#+end_src

** ■

#+begin_src scheme
`(,locale ,@elisp-packages ,@binaries)
#+end_src

* init.bash
:PROPERTIES:
:header-args+: :tangle init.bash
:END:

- File that contains Bash environment variable declarations.

#+begin_src bash
export LC_ALL=en_US.UTF-8
#+end_src

* total-recall.el
:PROPERTIES:
:header-args+: :tangle total-recall.el
:ID:       cdbad43e-8627-4918-9881-0340cab623b5
:END:
** Header

#+begin_src emacs-lisp
;;; total-recall.el --- Spaced repetition system -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2025 Pierre-Henry FRÖHRING
;; Author: Pierre-Henry FRÖHRING <contact@phfrohring.com>
;; Maintainer: Pierre-Henry FRÖHRING <contact@phfrohring.com>
;; Homepage: https://github.com/phf-1/total-recall
;; Package-Version: 0.5
;; Package-Requires: ((emacs "29.1"))
;; SPDX-License-Identifier: GPL-3.0-or-later
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This file is NOT part of GNU Emacs.
;;
;;; Commentary:
;;
;; <<commentary>>
;;
;;; Code:
#+end_src

** Dependencies

#+begin_src emacs-lisp
;; Dependencies

(unless (sqlite-available-p)
  (error "Emacs must be compiled with built-in support for SQLite databases"))
(require 'org)
(require 'time-date)
(require 'parse-time)
#+end_src

** Configuration

#+begin_src emacs-lisp
;; Configuration

(defgroup total-recall nil
  "Customization options for Total Recall.
This package provides `total-recall' for spaced repetition in Emacs."
  :group 'convenience
  :prefix "total-recall-")

(defcustom total-recall-database (file-name-concat user-emacs-directory "total-recall.sqlite3")
  "Path to the SQLite database for storing exercise data."
  :type 'string
  :group 'total-recall)

(defcustom total-recall-ripgrep-cmd "rg"
  "Name or path of the Ripgrep executable."
  :type 'string
  :group 'total-recall)

(defcustom total-recall-root-dir (expand-file-name "~")
  "Root directory where Ripgrep searches for Org files."
  :type 'string
  :group 'total-recall)

(defcustom total-recall-type-id "b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8"
  "Type ID for Org headings representing exercises."
  :type 'string
  :group 'total-recall)

(defcustom total-recall-window-width 160
  "Width of the Total Recall UI in characters."
  :type 'integer
  :group 'total-recall)

(defcustom total-recall-window-height 90
  "Height of the Total Recall UI in characters."
  :type 'integer
  :group 'total-recall)
#+end_src

** Utils

#+begin_src emacs-lisp
;; Utils
#+end_src

*** time-to-iso8601

#+begin_src emacs-lisp
(defun total-recall--time-to-iso8601 (time)
  "Convert TIME to an ISO 8601 formatted string.
TIME is a Lisp timestamp. Returns a string in the format YYYY-MM-DDTHH:MM:SSZ."
  (format-time-string "%FT%TZ" (time-convert time 'list) t))
#+end_src

*** iso8601-to-time

#+begin_src emacs-lisp
(defun total-recall--iso8601-to-time (iso8601)
  "Convert ISO8601 string to a Lisp timestamp.
ISO8601 is a string in ISO 8601 format. Returns a Lisp timestamp."
  (parse-iso8601-time-string iso8601))
#+end_src

*** time-init

#+begin_src emacs-lisp
(defun total-recall--time-init ()
  "Return a Lisp timestamp for January 1, 1970, 00:00:00 UTC."
  (encode-time 0 0 0 1 1 1970 0))
#+end_src

** Search

#+begin_src emacs-lisp
;; Search

(defun total-recall--search (dir ext type-id)
  "Search for files containing TYPE-ID with extension EXT in directory DIR.
DIR is a string path to the directory.
EXT is a string file extension (e.g., \"org\").
TYPE-ID is a string identifier to search for.
Returns a list of file paths."
  (let ((cmd (format "%s -g '*.%s' -i --no-heading -n --color=never '%s' %s"
                     total-recall-ripgrep-cmd ext type-id dir))
        matches)
    (with-temp-buffer
      (call-process-shell-command cmd nil `(,(current-buffer) nil) nil)
      (goto-char (point-min))
      (while (not (eobp))
        (let* ((line (buffer-substring-no-properties
                      (line-beginning-position) (line-end-position)))
               (match (split-string line ":")))
          (push (car match) matches))
        (forward-line 1))
      (delete-dups matches))))
#+end_src

** Measure

#+begin_src emacs-lisp
;; Measure
#+end_src

*** measure-mk

#+begin_src emacs-lisp
(defun total-recall--measure-mk (id time)
  "Build a measure that records ID and TIME.
ID is a string identifier.
TIME is a Lisp timestamp."
  (record 'total-recall-measure id time))
#+end_src

*** measure-p

#+begin_src emacs-lisp
(defun total-recall--measure-p (measure)
  "Return t if MEASURE is a valid measure structure, else nil."
  (memq (type-of measure)
        '(total-recall-measure
          total-recall-measure-success
          total-recall-measure-failure
          total-recall-measure-skip)))
#+end_src

*** measure-id

#+begin_src emacs-lisp
(defun total-recall--measure-id (measure)
  "Return the ID of MEASURE."
  (total-recall--measure-rcv measure :id))
#+end_src

*** measure-time

#+begin_src emacs-lisp
(defun total-recall--measure-time (measure)
  "Return the time of MEASURE."
  (total-recall--measure-rcv measure :time))
#+end_src

*** measure-rcv

#+begin_src emacs-lisp
(defun total-recall--measure-rcv (measure msg)
  "Implement the MEASURE interface selected by MSG."
    (pcase msg
      (:id (aref measure 1))
      (:time (aref measure 2))))
#+end_src

*** Success
**** success-measure-mk

#+begin_src emacs-lisp
(defun total-recall--success-measure-mk (id time)
  "Build a success measure that records ID and TIME."
  (record 'total-recall-measure-success id time))
#+end_src

**** success-measure-p

#+begin_src emacs-lisp
(defun total-recall--success-measure-p (measure)
  "Return t if MEASURE is a success measure, else nil."
  (eq (type-of measure) 'total-recall-measure-success))
#+end_src

*** Failure
**** failure-measure-mk

#+begin_src emacs-lisp
(defun total-recall--failure-measure-mk (id time)
  "Build a failure measure that records ID and TIME."
  (record 'total-recall-measure-failure id time))
#+end_src

**** failure-measure-p

#+begin_src emacs-lisp
(defun total-recall--failure-measure-p (measure)
  "Return t if MEASURE is a failure measure, else nil."
  (eq (type-of measure) 'total-recall-measure-failure))
#+end_src

*** Skip
**** skip-measure-mk

#+begin_src emacs-lisp
(defun total-recall--skip-measure-mk (id time)
  "Build a skip measure that records ID and TIME."
  (record 'total-recall-measure-skip id time))
#+end_src

**** skip-measure-p

#+begin_src emacs-lisp
(defun total-recall--skip-measure-p (measure)
  "Return t if MEASURE is a skip measure, else nil."
  (eq (type-of measure) 'total-recall-measure-skip))
#+end_src

** UI

#+begin_src emacs-lisp
;; UI
#+end_src

*** ui-mk

#+begin_src emacs-lisp
(defun total-recall--ui-mk ()
  "Build the Total Recall UI."
  (let ((frame (make-frame `((width . ,total-recall-window-width)
                             (height . ,total-recall-window-height))))
        (buffer (get-buffer-create "*total-recall*")))
    (record 'total-recall-ui buffer frame :state)))
#+end_src

*** ui-p

#+begin_src emacs-lisp
(defun total-recall--ui-p (ui)
  "Return t if UI is a valid UI structure, else nil."
  (eq (type-of ui) 'total-recall-ui))
#+end_src

*** ui-init

#+begin_src emacs-lisp
(defun total-recall--ui-init (ui)
  "Initialize UI."
  (total-recall--ui-rcv ui :init))
#+end_src

*** ui-no-exercises

#+begin_src emacs-lisp
(defun total-recall--ui-no-exercises (ui)
  "Display a /no exercises/ message in UI."
  (total-recall--ui-rcv ui :no-exercises))
#+end_src

*** ui-display-question

#+begin_src emacs-lisp
(defun total-recall--ui-display-question (ui id subject question)
  "Display QUESTION identified by ID about SUBJECT in UI.
QUESTION is a string.
SUBJECT is a string."
  (total-recall--ui-rcv ui `(:display :question ,id ,subject ,question)))
#+end_src

*** ui-display-answer

#+begin_src emacs-lisp
(defun total-recall--ui-display-answer (ui answer)
  "Display ANSWER in UI.
ANSWER is a string."
  (total-recall--ui-rcv ui `(:display :answer ,answer)))
#+end_src

*** ui-kill

#+begin_src emacs-lisp
(defun total-recall--ui-kill (ui)
  "Close UI."
  (total-recall--ui-rcv ui :kill))
#+end_src

*** ui-rcv

#+begin_src emacs-lisp
(defun total-recall--ui-rcv (ui msg)
  "Implement the UI API selected by MSG."
  (unless (total-recall--ui-p ui) (error "Not a UI structure"))
  (let ((buffer (aref ui 1))
        (frame (aref ui 2))
        (state (aref ui 3)))
    (select-frame-set-input-focus frame)
    (switch-to-buffer buffer)
    (pcase msg
      (:init
       (unless (eq state :state) (error "state = %s" state))
       (erase-buffer)
       (unless (derived-mode-p 'org-mode) (org-mode))
       (insert "* Total Recall *\n\n\n")
       (goto-char (point-min))
       (aset ui 3 :init)
       ui)

      (:no-exercises
       (unless (eq state :init) (error "state = %s" state))
       (save-excursion
         (goto-char (point-max))
         (insert "No exercises found.\n"))
       (run-with-timer 2 nil (lambda () (total-recall--ui-rcv ui :kill)))
       ui)

      (`(:display :question ,id ,subject ,question)
       (when (memq state '(:question :answer))
         (aset ui 3 :state)
         (total-recall--ui-rcv ui :init)
         (setq state (aref ui 3)))

       (unless (eq state :init) (error "state = %s" state))
       (save-excursion
         (goto-char (point-max))
         (insert (format "[[ref:%s][%s]]\n\n\n" id subject))
         (insert (format "%s\n\n\n" question)))
       (aset ui 3 :question)
       ui)

      (`(:display :answer ,answer)
       (unless (eq state :question) (error "state = %s" state))
       (save-excursion
         (goto-char (point-max))
         (insert (format "%s\n\n\n" answer)))
       (aset ui 3 :answer)
       ui)

      (:kill
       (when (buffer-live-p buffer) (kill-buffer buffer))
       (when (frame-live-p frame) (delete-frame frame))
       (aset ui 3 :dead)
       ui))))
#+end_src

** DB

#+begin_src emacs-lisp
;; DB
#+end_src

*** db-mk

#+begin_src emacs-lisp
(defun total-recall--db-mk (path)
  "Open an SQLite database at PATH.
PATH is a string file path. Returns an SQLite database handle."
  (sqlite-open path))
#+end_src

*** db-p

#+begin_src emacs-lisp
(defun total-recall--db-p (x)
  "Return t if X is an SQLite database handle, else nil."
  (sqlitep x))
#+end_src

*** db-save

#+begin_src emacs-lisp
(defun total-recall--db-save (db measure)
  "Save MEASURE to database DB.
DB is an SQLite database handle. MEASURE is a measure structure. Returns t."
  (total-recall--db-rcv db `(:save ,measure)))
#+end_src

*** db-select

#+begin_src emacs-lisp
(defun total-recall--db-select (db id)
  "Retrieve measures for exercise ID from database DB.
DB is an SQLite database handle. ID is a string exercise identifier.
Returns a list of measure structures."
  (total-recall--db-rcv db `(:select :measures ,id)))
#+end_src

*** db-close

#+begin_src emacs-lisp
(defun total-recall--db-close (db)
  "Close database DB.
DB is an SQLite database handle. Returns t."
  (total-recall--db-rcv db :close))
#+end_src

*** db-rcv

#+begin_src emacs-lisp
(defun total-recall--db-rcv (db msg)
  "Handle MSG for SQLite database DB.
DB is an SQLite database handle.
Returns the result of the operation."
  (unless (sqlite-select db "SELECT name FROM sqlite_master WHERE type='table' AND name='exercise_log'")
    (sqlite-execute db
                    "CREATE TABLE exercise_log (
                       type TEXT NOT NULL,
                       id TEXT NOT NULL,
                       time TEXT NOT NULL)"))

  (pcase msg
    (`(:measure-to-row ,measure)
     (pcase measure
       ((pred total-recall--measure-p)
        (let ((type
               (cond
                ((total-recall--success-measure-p measure) "success")
                ((total-recall--failure-measure-p measure) "failure")))
              (id (total-recall--measure-id measure))
              (time (total-recall--time-to-iso8601 (total-recall--measure-time measure))))
          (list type id time)))
       (_ (error "MEASURE is not a Measure. %S" measure))))

    (`(:row-to-measure ,row)
     (pcase row
       (`(,type ,id ,time)
        (pcase type
          ("success" (total-recall--success-measure-mk id (total-recall--iso8601-to-time time)))
          ("failure" (total-recall--failure-measure-mk id (total-recall--iso8601-to-time time)))))))

    (`(:save ,measure)
     (pcase measure
       ((pred total-recall--measure-p)
        (sqlite-execute
         db
         "INSERT INTO exercise_log (type, id, time) VALUES (?, ?, ?)"
         (total-recall--db-rcv db `(:measure-to-row ,measure)))
        t)
       (_ (error "Unexpected value: %S" measure))))

    (`(:select :measures ,id)
     (let (rows)
       (setq rows
             (sqlite-select
              db
              "SELECT type, id, time FROM exercise_log WHERE id = ? ORDER BY time ASC"
              (list id)))
       (mapcar
        (lambda (row) (total-recall--db-rcv db `(:row-to-measure ,row)))
        rows)))

    (:close
     (sqlite-close db)
     t)

    (_ (error "Unknown message: %S" msg))))
#+end_src

** Exercise

#+begin_src emacs-lisp
;; Exercise
#+end_src

*** exercise-mk

#+begin_src emacs-lisp
(defun total-recall--exercise-mk (subject id question answer)
  "Create an exercise with SUBJECT, ID, QUESTION, and ANSWER.
SUBJECT, ID, QUESTION, and ANSWER are strings. Signals an error if any argument
is not a string. Returns an exercise structure."
  (unless (stringp subject) (error "Subject is not a string"))
  (unless (stringp id) (error "ID is not a string"))
  (unless (stringp question) (error "Question is not a string"))
  (unless (stringp answer) (error "Answer is not a string"))
  (record 'total-recall-exercise subject id question answer))
#+end_src

*** exercise-p

#+begin_src emacs-lisp
(defun total-recall--exercise-p (ex)
  "Return t if EX is an exercise structure, else nil."
  (eq (type-of ex) 'total-recall-exercise))
#+end_src

*** exercise-subject

#+begin_src emacs-lisp
(defun total-recall--exercise-subject (exercise)
  "Return the subject of EXERCISE.
EXERCISE is an exercise structure. Returns a string."
  (total-recall--exercise-rcv exercise :subject))
#+end_src

*** exercise-id

#+begin_src emacs-lisp
(defun total-recall--exercise-id (exercise)
  "Return the ID of EXERCISE.
EXERCISE is an exercise structure. Returns a string."
  (total-recall--exercise-rcv exercise :id))
#+end_src

*** exercise-question

#+begin_src emacs-lisp
(defun total-recall--exercise-question (exercise)
  "Return the question of EXERCISE.
EXERCISE is an exercise structure. Returns a string."
  (total-recall--exercise-rcv exercise :question))
#+end_src

*** exercise-answer

#+begin_src emacs-lisp
(defun total-recall--exercise-answer (exercise)
  "Return the answer of EXERCISE.
EXERCISE is an exercise structure. Returns a string."
  (total-recall--exercise-rcv exercise :answer))
#+end_src

*** exercise-scheduled

#+begin_src emacs-lisp
(defun total-recall--exercise-scheduled (exercise db)
  "Return the scheduled review time for EXERCISE using database DB.
EXERCISE is an exercise structure. DB is an SQLite database handle.
Returns a Lisp timestamp."
  (total-recall--exercise-rcv exercise `(:scheduled ,db)))
#+end_src

*** exercise-rcv

  (record 'total-recall-exercise subject id question answer)

#+begin_src emacs-lisp
(defun total-recall--exercise-rcv (exercise msg)
  "Handle MSG for EXERCISE.
EXERCISE is an exercise structure. MSG can be :subject, :id, :question, :answer,
or (:scheduled DB). Returns the corresponding value (e.g., string or timestamp)."
  (let ((subject (aref exercise 1))
        (id (aref exercise 2))
        (question (aref exercise 3))
        (answer (aref exercise 4)))

    (pcase msg
      (:subject subject)

      (:id id)

      (:question question)

      (:answer answer)

      (`(:scheduled ,db)
       (let (measures (last-failure-index -1) nbr last-success-time)
         (setq measures (total-recall--db-select db id))

         (let ((i -1))
           (dolist (measure measures)
             (setq i (+ i 1))
             (when (total-recall--failure-measure-p measure)
               (setq last-failure-index i))))

         (setq nbr
               (if (< last-failure-index 0)
                   (length measures)
                 (- (length measures) (1+ last-failure-index))))

         (setq last-success-time
               (when (> nbr 0)
                 (let ((last-measure (nth (1- (length measures)) measures)))
                   (if (total-recall--success-measure-p last-measure)
                       (total-recall--measure-time last-measure)
                     (error "Last measure is not a success despite NBR > 0")))))

         (if (zerop nbr)
             (total-recall--time-init)
           (let* ((delta-days (expt 2 (- nbr 1)))
                  (delta-secs (* delta-days 24 60 60))
                  (t-secs (time-to-seconds last-success-time))
                  (result-secs (+ t-secs delta-secs)))
             (seconds-to-time result-secs))))))))
#+end_src

** Node

#+begin_src emacs-lisp
;; Node
#+end_src

**** node-depth-first

#+begin_src emacs-lisp
(defun total-recall--node-depth-first (node func)
  "Return the list of results from calling FUNC on NODE and its children, depth-first."
  (let ((head
         (mapcan
          (lambda (node) (total-recall--node-depth-first node func))
          (org-element-contents node)))
        (last (funcall func node)))
    (pcase last
      (:err head)
      (_ (append head (list last))))))
#+end_src

**** node-to-subject

#+begin_src emacs-lisp
(defun total-recall--node-subject (node)
  "Return the subject of NODE.
A subject is a string like A/B/C, where A and B are the titles of the
parents of the node, and C is the title of the node. A node's title
is the string of the relevant headline."
  (string-join
   (reverse
    (org-element-lineage-map node
        (lambda (parent) (org-element-property :raw-value parent))
      '(headline)
      t))
   "/"))
#+end_src

**** node-to-string

#+begin_src emacs-lisp
(defun total-recall--node-to-string (node)
  "Return the string associated with NODE, leveled to level 1."
  (replace-regexp-in-string
   "\\`\\*+" "*"
   (string-trim
    (buffer-substring-no-properties
     (org-element-property :begin node)
     (org-element-property :end node)))))
#+end_src

**** node-to-exercise

#+begin_src emacs-lisp
(defun total-recall--node-to-exercise (node)
  "Return an exercise built from NODE, or `:err' if not possible.
If NODE is expected to be an exercise based on its type but its
structure is invalid, raise an error."
  (let (should-be-exercise id list-headline question answer)

    (setq should-be-exercise
          (and (eq (org-element-type node) 'headline)
               (string= (org-element-property :TYPE node) total-recall-type-id)))

    (if should-be-exercise
        (progn
          (setq id (org-element-property :ID node))
          (unless (stringp id) (error "Exercise has no ID property"))
          (setq list-headline
                (seq-filter
                 (lambda (child) (eq (org-element-type child) 'headline))
                 (org-element-contents node)))
          (pcase (length list-headline)
            (0 (error "Exercise has no question nor answer. id = %s" id))
            (1 (error "Exercise has no answer. id = %s" id))
            (_
             (setq question (total-recall--node-to-string (car list-headline)))
             (setq answer (total-recall--node-to-string (cadr list-headline)))))

          (total-recall--exercise-mk
           (total-recall--node-subject node)
           id
           question
           answer))
      :err)))
#+end_src

** Filesystem

#+begin_src emacs-lisp
;; Filesystem
#+end_src

*** fs-list-exercises

#+begin_src emacs-lisp
(defun total-recall--fs-list-exercises (path)
  "List exercises in PATH.
PATH is a string file or directory path. Returns a list of exercise structures."
  (total-recall--fs-rcv path :list-exercises))
#+end_src

*** fs-rcv

#+begin_src emacs-lisp
(defun total-recall--fs-rcv (path msg)
  "Handle MSG for PATH.
PATH is a string file or directory path. MSG is a symbol like :list-exercises.
Delegates to directory or file handlers. Returns the handler’s result."
  (cond
   ((file-directory-p path)
    (total-recall--dir-rcv path msg))
   ((file-exists-p path)
    (total-recall--file-rcv path msg))))
#+end_src

*** Directory
**** dir-list-exercises

#+begin_src emacs-lisp
(defun total-recall--dir-list-exercises (dir)
  "List exercises in Org files under directory DIR.
DIR is a string directory path. Returns a list of exercise structures."
  (total-recall--dir-rcv dir :list-exercises))
#+end_src

**** dir-rcv

#+begin_src emacs-lisp
(defun total-recall--dir-rcv (dir msg)
  "Handle MSG for directory DIR.
DIR is a string directory path. MSG is a symbol like :list-exercises.
Returns a list of exercise structures for :list-exercises."
  (pcase msg
    (:list-exercises
     (mapcan
      (lambda (file-path) (total-recall--file-rcv file-path :list-exercises))
      (total-recall--search dir "org" total-recall-type-id)))))
#+end_src

*** File
**** file-list-exercises

#+begin_src emacs-lisp
(defun total-recall--file-list-exercises (file)
  "List exercises in Org file FILE.
FILE is a string file path. Returns a list of exercise structures."
  (total-recall--file-rcv file :list-exercises))
#+end_src

**** file-rcv

#+begin_src emacs-lisp
(defun total-recall--file-rcv (file msg)
  "Handle MSG for Org file FILE.
FILE is a string file path. MSG is a symbol like :list-exercises.
Returns a list of exercise structures for :list-exercises."
  (pcase msg
    (:list-exercises
     (with-temp-buffer
       (insert-file-contents file)
       (org-mode)
       (org-fold-show-all)
       (let ((org-element-use-cache nil))
         (total-recall--node-depth-first
          (org-element-parse-buffer 'greater-element)
          #'total-recall--node-to-exercise))))))
#+end_src

** total-recall

#+begin_src emacs-lisp
;; total-recall
#+end_src

#+begin_src emacs-lisp
;;;###autoload
(defun total-recall ()
  "Provide spaced repetitions capabilities to Emacs.

<<commentary>>"
  (interactive)

  (unless (executable-find total-recall-ripgrep-cmd)
    (user-error "Ripgrep (rg) is not installed. Please install it to use this package"))

  (let ((exercises (total-recall--fs-list-exercises total-recall-root-dir))
        (db (total-recall--db-mk total-recall-database))
        (ui (total-recall--ui-mk))
        (use-dialog-box nil)
        exercise
        scheduled
        choice)
    (total-recall--ui-init ui)
    (if (null exercises)
        (total-recall--ui-no-exercises ui)
      (while exercises
        (setq exercise (pop exercises))
        (setq scheduled (total-recall--exercise-scheduled exercise db))
        (when (time-less-p scheduled (current-time))
          (total-recall--ui-display-question
           ui
           (total-recall--exercise-id exercise)
           (total-recall--exercise-subject exercise)
           (total-recall--exercise-question exercise))
          (setq choice
                (read-char-choice
                 "Choose: (r) Reveal answer (k) Skip 2 (q) Quit: "
                 '(?r ?k ?q)))
          (pcase choice
            (?r
             (total-recall--ui-display-answer ui (total-recall--exercise-answer exercise))
             (setq choice
                   (read-char-choice
                    "Choose: (s) Success (f) Failure (q) Quit: "
                    '(?s ?f ?q)))
             (pcase choice
               (?s
                (total-recall--db-save db (total-recall--success-measure-mk (total-recall--exercise-id exercise) (current-time))))
               (?f
                (total-recall--db-save db (total-recall--failure-measure-mk (total-recall--exercise-id exercise) (current-time))))
               (?q
                (setq exercises nil))))
            (?k
             nil)
            (?q
             (setq exercises nil))))))
    (total-recall--db-close db)
    (total-recall--ui-kill ui)))
#+end_src

** Footer

#+begin_src emacs-lisp
(provide 'total-recall)

;;; total-recall.el ends here

;; Local Variables:
;; coding: utf-8
;; byte-compile-docstring-max-column: 80
;; require-final-newline: t
;; sentence-end-double-space: nil
;; indent-tabs-mode: nil
;; End:
#+end_src
* Makefile
:PROPERTIES:
:header-args+: :tangle Makefile
:END:
** Configuration

- List of Makefile configurations.

#+begin_src makefile
SHELL := bash
.SHELLFLAGS := -ceuo pipefail
MAKEFLAGS += --no-print-directory
.ONESHELL:
.SILENT:
#+end_src

*** BUILD

- ${BUILD} is the directory under which all generated files are installed.

#+begin_src makefile
BUILD := _build
${BUILD}:
        mkdir -p $@
#+end_src

*** TRACE

- ${TRACE} is a file used to record an execution trace.

#+begin_src makefile
TRACE := ${BUILD}/trace.txt
#+end_src

*** TRAP

- ${TRAP} If something has been written to ${TRACE}, then consider that the rule failed.

#+begin_src makefile
TRAP := > ${TRACE}; trap 'if [[ $$? -ne 0 ]]; then cat ${TRACE}; fi' EXIT
#+end_src

*** MAIN_ORG

- ${MAIN_ORG} is the path to source file.

#+begin_src makefile
MAIN_ORG := README.org
#+end_src

** help

- make help # Print this help.

#+begin_src makefile
.PHONY: help
help:
        grep '^# - make ' $(MAKEFILE_LIST) | sed 's/^# - make //' | awk 'BEGIN {FS = " # "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
#+end_src

** tangle-heading

- make tangle-heading # Returns the path to the updated ./tangle-heading script.

#+begin_src makefile
.PHONY: tangle-heading
TANGLE_HEADING := ${BUILD}/tangle-heading
tangle-heading: ${TANGLE_HEADING}
${TANGLE_HEADING}: ${MAIN_ORG} | ${BUILD}
        ${TRAP}
        ./tangle-heading ${MAIN_ORG} tangle-heading ${BUILD} &> ${TRACE}
        cp -vf ${BUILD}/tangle-heading ./tangle-heading &>> ${TRACE}
        tail -n 1 ${TRACE}
#+end_src

** Makefile

- make Makefile # Returns the path to the updated ./Makefile.

#+begin_src makefile
.PHONY: Makefile
MAKEFILE := ${BUILD}/Makefile
Makefile: ${MAKEFILE}
${MAKEFILE}: ${MAIN_ORG} | ${BUILD}
        ${TRAP}
        ./tangle-heading ${MAIN_ORG} Makefile ${BUILD} &> ${TRACE}
        cp -vf ${BUILD}/Makefile ./Makefile &>> ${TRACE}
        tail -n 1 ${TRACE}
#+end_src

** packages.scm

- make packages.scm # Returns the path to the Guix packages available in the environment.

#+begin_src makefile
.PHONY: packages.scm
PACKAGES_SCM := ${BUILD}/packages.scm
packages.scm: ${PACKAGES_SCM}
${PACKAGES_SCM}: ${MAIN_ORG} | ${BUILD}
        ${TRAP}
        ./tangle-heading ${MAIN_ORG} packages.scm ${BUILD} &> ${TRACE}
        echo "$@"
#+end_src

** init.bash

- make init.bash # Returns the path to parameters that initialize Bash in the environment.

#+begin_src makefile
.PHONY: init.bash
INIT_BASH := ${BUILD}/init.bash
init.bash: ${INIT_BASH}
${INIT_BASH}: ${MAIN_ORG} | ${BUILD}
        ${TRAP}
        ./tangle-heading ${MAIN_ORG} init.bash ${BUILD} &> ${TRACE}
        echo "$@"
#+end_src

** env

- make env # Starts the environment.

#+begin_src makefile
.PHONY: env
GUIX := guix
GUIX_SHELL := ${GUIX} shell --container \
        -F \
        -N \
        --file=${PACKAGES_SCM} \
        --preserve='^TERM$$' \
        -- bash --init-file ${INIT_BASH}
env: ${PACKAGES_SCM} ${INIT_BASH}
        CMD="${CMD}"
        if [[ ! -v GUIX_ENVIRONMENT ]]; then
          if [[ "$${CMD}" == "" ]]; then
            ${GUIX_SHELL} -i;
          else
            ${GUIX_SHELL} -c "${CMD}";
          fi
        else
          ${CMD}
          :
        fi
#+end_src

** el

- make el # Returns the path to the elisp package.

#+begin_src makefile
.PHONY: el
TOTAL_RECALL_EL := ${BUILD}/total-recall.el
el: ${TOTAL_RECALL_EL}
${TOTAL_RECALL_EL}: ${MAIN_ORG} | ${BUILD}
        ${TRAP}
        ./tangle-heading ${MAIN_ORG} total-recall.el ${BUILD} &> ${TRACE}
        # sed -i '1,2d' ${TOTAL_RECALL_EL} &>> ${TRACE}
        [[ -s ${TRACE} ]] && exit 1
        echo "$@"
#+end_src

** elc

- make elc # Returns the path to the compiled elisp package.

#+begin_src makefile
.PHONY: elc
TOTAL_RECALL_ELC := ${BUILD}/total-recall.elc
elc: ${TOTAL_RECALL_ELC}
${TOTAL_RECALL_ELC}: ${TOTAL_RECALL_EL}
        ${TRAP}
        emacs -Q --batch \
        --eval '(setq org-id-track-globally nil)' \
        --eval '(defun reb-target-binding (_sym) (error "pcre2el v1.11"))' \
        -f batch-byte-compile $< &> ${TRACE}
        [[ -s ${TRACE} ]] && exit 1
        echo "$@"
#+end_src

** lint

- make lint # Returns the path to the linting report of the elisp package.

#+begin_src makefile
.PHONY: lint
LINT_REPORT := ${BUILD}/lint-report.txt
lint: ${LINT_REPORT}
${LINT_REPORT}: ${TOTAL_RECALL_EL}
        ${TRAP}
        emacs --batch \
        --file $< \
        --eval '(setq org-id-track-globally nil)' \
        --eval "(progn (require 'package) (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t) (package-initialize))" \
        --eval "(progn (require 'package-lint) (let ((errors (package-lint-buffer))) (when errors (message \"%s\" errors))))" &> ${TRACE}
        [[ -s ${TRACE} ]] && exit 1
        echo "$@"
#+end_src

** checkdoc

- make checkdoc # Returns the path to the analysis of the docstrings of the elisp package.

#+begin_src makefile
.PHONY: checkdoc
CHECKDOC := ${BUILD}/checkdoc.txt
checkdoc: ${CHECKDOC}
${CHECKDOC}: ${TOTAL_RECALL_EL}
        ${TRAP}
        emacs -Q --batch \
        --eval '(setq org-id-track-globally nil)' \
        --eval '(checkdoc-file "$<")' &> ${TRACE}
        [[ -s ${TRACE} ]] && exit 1
        echo "$@"
#+end_src

** test

- make test # Returns the path to the analysis of the docstrings of the elisp package.

#+begin_src makefile
.PHONY: test
TEST := ${BUILD}/test-log.txt
test: ${TEST}
${TEST}: ${TOTAL_RECALL_EL}
        ${TRAP}
        emacs -Q --batch \
        --eval '(setq org-id-track-globally nil)' \
        --eval '(load-file "$<")' \
        --eval '(ert-run-tests-batch-and-exit t)' &> $@
        echo "$@"
#+end_src

** all

- make all # Returns the path of the elisp package after lint, checkdoc and elc steps.

#+begin_src makefile
.PHONY: all
all: ${BUILD}
        ${TRAP}
        ${MAKE} env CMD="${MAKE} lint checkdoc elc" &> ${TRACE}
        echo ${TOTAL_RECALL_EL}
#+end_src

** clean

- make clean # Deletes all generated files.

#+begin_src makefile
.PHONY: clean
clean:
        rm -rfv ${BUILD}
#+end_src

* Message
** TODO Fix UI interaction (do not capture all events)
** TODO Fix reviewing algo
** TODO Maybe use save-excursion in UI
** TODO node-to-string should promote children too
** [2025-04-15 Tue]
*** DONE Fix topological sorting of Q&A
