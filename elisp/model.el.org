# META
#
# We use this syntax: https://docs.racket-lang.org/scribble/reader.html
# @cmd[] ⇔ (cmd)
# @cmd[1] ⇔ (cmd 1)
# @cmd{1} ⇔ (cmd "1")
#
# (define (pkg-name) "package-name")
# (define (pkg-desc) "package-description")
# (define (pkg-commentary) "package-commentary")
# (define (pkg-version) "1.0")
# (define (pkg-dependencies) '((emacs "27.1") (pcre2el "1.12")))
# (define (pkg-spdx) "GPL-3.0-or-later")
#
# (define (author-name) "author name")
# (define (author-emaim) "author email")
# (define (author-github) "https://github.com/handle")
#
# (define (type-name) "")
# (define (type-interpretation) "")
# (define (type-constructor) "")
# (define (type-identifier) "")
# (define (type-eliminator) "")
# (define (type-invariant) "")
#
# Algorithm
#
# - ref←click : Buffer
#  - content-regex :≡ self←content-regex
#  - file-matches :≡ search←files(content-regex)
#  - buffer-matches :≡ search←buffers(content-regex)
#  - filename-matches :≡ search←filenames(filename-regex)
#  - matches :≡ file-matches + buffer-matches + filename-matches
#  - id :≡ self←id
#  - tag :≡ self←tag
#  - ui←matches(matches id tag)
#
# Documentation
#
# - One sentence per line.
# - See: https://sive.rs/1s

#+PROPERTY: header-args:emacs-lisp :noweb yes :tangle model.el

* Package header

#+begin_src emacs-lisp
;;; @pkg-name[].el --- @pkg-desc[] -*- lexical-binding: t; -*-
;;
;; Copyright (C) @author-name[]
;; Author: @author-name[] <@author-email[]>
;; Maintainer: @author-name[] <@author-email[]>
;; Homepage: @author-github[]/@pkg-name[]
;;
;; Package-Version: @pkg-version[]
;; Package-Requires: @pkg-dependencies[]
;; SPDX-License-Identifier: @pkg-spdx[]
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This file is NOT part of GNU Emacs.
;;
;;; Commentary:
;;
;; @pkg-commentary[]
;;
;;; Code:
#+end_src

* Dependencies

dependencies : List(Require)

#+begin_src emacs-lisp
;; Dependencies

(require 'org)
#+end_src

* Configuration

configuration : DefGroup × List(DefCustom)

#+begin_src emacs-lisp
;; Configuration
;;
;; This section lists the user's defined custom parameters.

(defgroup @pkg-name[] nil
  "Customization options for @pkg-name[] mode.
This mode provides functionality for handling locations and references
within text and programming buffers."
  :group 'convenience
  :prefix "@pkg-name[]-")

(defcustom @pkg-name[]-delay 1
  "Time in seconds after which @pkg-name[] operations are applied.
This comes after buffer creation or modification."
  :type 'integer
  :group '@pkg-name[])
#+end_src

* @type-name[]

#+begin_src emacs-lisp
;; @type-name[]
;;
;; @type-interpretation[]
#+end_src

** @type-constructor[] : X → @type-name[]

#+begin_src emacs-lisp
(defun @pkg-name[]--@type-name[]-mk (x)
  "Build a @type-name[] from X
@type-invariant[]"
  (unless (file-exists-p path) (error "PATH does not exist"))
  (unless (and (integerp line) (<= 0 line)) (error "LINE is not a positive integer"))
  (list :line-file-match path line))
#+end_src

** @type-identifier : Any → Boolean

#+begin_src emacs-lisp
(defun @pkg-name[]--@type-name[]-p (any)
  "Check if ANY is a @type-name[] object."
  (eq (car-safe any) :@type-name[]))
#+end_src

** @type-eliminator[] : (Y → C) → @type-name[] → C

use (pY→X ▶ mk) = id

#+begin_src emacs-lisp
(defun @pkg-name[]--@type-name[]-use (func)
  "Apply FUNC to the path and line of a @type-name[] object."
  (lambda (match)
    (unless (@pkg-name[]--@type-name[]-p match) (error "MATCH is not a @type-name[]"))
    (apply func (cdr match))))
#+end_src

* Minor mode

#+begin_src emacs-lisp
;; Minor Mode
;;
;; Make sure that locations and references are activated in all buffers at all times
;; as long as they derive from `text-mode' or `prog-mode'.

;;;###autoload
(define-minor-mode @pkg-name[]-mode
  "@pkg-description[]"
  :init-value nil
  :lighter " L&R"
  :keymap nil
  :group '@pkg-name[]
  :global t
  (if @pkg-name[]-mode
      (@pkg-name[]--activate)
    (@pkg-name[]--deactivate)))
#+end_src

* Package footer

#+begin_src emacs-lisp
(provide '@pkg-name[])

;;; @pkg-name[].el ends here

;; Local Variables:
;; coding: utf-8
;; fill-column: 100
;; require-final-newline: t
;; sentence-end-double-space: nil
;; indent-tabs-mode: nil
;; End:
#+end_src

* File configuration

# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
