#!/usr/bin/env -S emacs --script
;; tangle-heading
;; - ~./tangle-heading ./file.org file.el directory~ tangles the heading named ~file.el~
;;   and move the resulting file under ~directory~.
;; - A heading named ~file.el~ is expected to get tangled into a file named ~./file.el~.


(require 'org)
(require 'ob-core)

(setq org-id-track-globally nil)

;; Set Scheme implementation to Guile
(require 'ob-scheme)
(setq-default geiser-scheme-implementation 'guile)

(setq make-backup-files nil)
(setq auto-save-default nil)

(defun user--org-remove-property-drawers ()
  "After tangling, remove all :PROPERTIES: drawers."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^.*:PROPERTIES:$" nil t)
      (let ((start (line-beginning-position)))
        (when (re-search-forward "^.*:END:\n" nil t)
          (delete-region start (point)))))
    (when (buffer-modified-p)
      (save-buffer))))
(add-hook 'org-babel-post-tangle-hook #'user--org-remove-property-drawers)

(defun org-babel-spec-to-string (spec)
  "Insert SPEC into the current file.

Insert the source-code specified by SPEC into the current source
code file.  This function uses `comment-region' which assumes
that the appropriate major-mode is set.  SPEC has the form:

  (start-line file link source-name params body comment)"
  (pcase-let*
      ((`(,start ,file ,link ,source ,info ,body ,comment) spec)
       (comments (cdr (assq :comments info)))
       (link? (or (string= comments "both") (string= comments "link")
                  (string= comments "yes") (string= comments "noweb")))
       (link-data `(("start-line" . ,(number-to-string start))
                    ("file" . ,file)
                    ("link" . ,link)
                    ("source-name" . ,source)))
       (insert-comment (lambda (text)
                         (when (and comments
                                    (not (string= comments "no"))
                                    (org-string-nw-p text))
                           (if org-babel-tangle-uncomment-comments
                               ;; Plain comments: no processing.
                               (insert text)
                             ;; Ensure comments are made to be comments.  Also ignore
                             ;; invisible characters when commenting.
                             (comment-region
                              (point)
                              (progn (insert (org-no-properties text))
                                     (point))))))))
    (when comment (funcall insert-comment comment))
    (when link?
      (funcall insert-comment
               (org-fill-template
                org-babel-tangle-comment-format-beg link-data)))
    (insert body "\n")
    (when link?
      (funcall insert-comment
               (org-fill-template
                org-babel-tangle-comment-format-end link-data)))))

(defun tangle-headline-to-dest (name dest)
  (let (pos)
    (when (not (file-directory-p dest)) (error "Destination directory `%s' does not exist." dest))
    (org-with-wide-buffer
     (save-excursion
       (setq pos (org-find-exact-headline-in-buffer name (current-buffer) t))
       (when (null pos) (error "Heading named `%s' not found." name))
       (goto-char pos)
       (org-narrow-to-subtree)
       (org-babel-tangle)
       (when (not (file-exists-p name)) (error "Tangling `%s' did not build matching file." name))
       (rename-file name (concat (file-name-as-directory dest) name) t)))))

;; Silence messages.
(fset 'message (lambda (&rest args) nil))

(let ((org-file (pop argv))
      (heading-name (pop argv))
      (dest-dir (pop argv)))
  (with-current-buffer (find-file-noselect org-file)
    (tangle-headline-to-dest heading-name dest-dir)))
