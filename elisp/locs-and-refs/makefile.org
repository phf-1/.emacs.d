#+PROPERTY: header-args :noweb yes :comments org :mkdirp yes :tangle Makefile

* Makefile

#+begin_src makefile
SHELL := bash
.ONESHELL:
.SHELLFLAGS := -ceuo pipefail
EMACS := emacs --batch
PKG := locs-and-refs.org
ENVIRONMENT := environment.org
BUILD := _build
$(shell mkdir -p ${BUILD})
#+end_src

** env

1. ~make env~ builds the environment.

#+begin_src makefile
.PHONY: env
ENV := ${BUILD}/environment.scm
BASH_INIT := ${BUILD}/bash.rc
ORG_PATCHES := ${BUILD}/org-patches.el
${ENV}: ${ENVIRONMENT}
	emacs -Q --batch $< -f org-babel-tangle
env: ${ENV}
	guix shell --container \
	-F \
	--file=$< \
	--preserve='^TERM$$' \
	-- bash --init-file ${BASH_INIT} -i
#+end_src

** el

2. ~make el~ tangle the package.

#+begin_src makefile
.PHONY: el
EL := ${BUILD}/locs-and-refs.el
el: ${EL}
${EL}: ${ENV} ${PKG} 
	$(EMACS) ${PKG} -l ${ORG_PATCHES} -f org-babel-tangle
	sed -i '1,2d' $@
#+end_src

** elc

3. ~make elc~ byte compile the package.

#+begin_src makefile
.PHONY: elc
ELC := ${BUILD}/locs-and-refs.elc
elc: ${ELC}
${ELC}: ${EL}
	$(EMACS) -f batch-byte-compile $<
#+end_src

** lint

4. ~make lint~ lint the package.

#+begin_src makefile
.PHONY: lint
LINT := ${BUILD}/lint-report.txt
lint: ${LINT}
${LINT}: ${EL}
	$(EMACS) $< -f package-lint-buffer > $@
#+end_src

** checkdoc

5. ~make checkdoc~ checks the documentation of the package.

#+begin_src makefile
.PHONY: checkdoc
CHECKDOC := ${BUILD}/checkdoc-report.txt
checkdoc: ${CHECKDOC}
${CHECKDOC}: ${EL}
	$(EMACS) --eval '(checkdoc-file "$<")' > $@
#+end_src

** all

6. ~make all~ all of the above.

#+begin_src makefile
.DEFAULT_GOAL := all
.PHONY: all
all: elc checkdoc lint
#+end_src

** clean

7. ~make clean~ delete all generated files.

#+begin_src makefile
.PHONY: clean
clean:
	rm -rfv _*
#+end_src
