#+PROPERTY: header-args :noweb yes :mkdirp yes

* Objective

#+name: commentary
#+begin_src emacs-lisp
This minor mode allows to define locations and reference them
to/from any text file using `ripgrep' and `fd'.

For all buffers that derive from ~text-mode~ or ~prog-mode~,
strings like \"[[id:1234]]\" or \"[[ref:1234]]\" are transformed
into locations and references respectively.

A reference or a location may be viewed as a button such that:
- A click on a reference displays links to matching locations.
- A click on a location displays links to matching references.

Given a reference \"[[ref:1234]]\", a matching location is a
string in a file or a buffer with the following form: \"[[id:1234]]\".
It might also be a file named ~1234~ like ~/tmp/1234.txt~.

Given a location \"[[id:1234]]\", a matching reference is a
string in a file or a buffer with the following form: \"[[ref:1234]]\".

More precisely:

- A location is defined as:
  - or :ID: <ID>
  - or [[id:<ID>]]
  - or [[id:<ID>][<name>]]

- A reference is defined as:
  - or :REF: <ID>
  - or [[ref:<ID>]]
  - or [[ref:<ID>][<name>]]
#+end_src

* tangle-heading
:PROPERTIES:
:header-args+: :tangle tangle-heading :shebang "#!/usr/bin/env -S emacs --script"
:END:

- ~./tangle-heading ./file.org file.el directory~
  - tangles the heading named ~file.el~
  - moves the resulting file under ~directory~
- A heading named ~file.el~ is expected to get tangled into a file named ~./file.el~.

#+begin_src emacs-lisp
(require 'org)
(require 'ob-core)

(setq org-id-track-globally nil)

;; Set Scheme implementation to Guile
(require 'ob-scheme)
(setq-default geiser-scheme-implementation 'guile)

(setq make-backup-files nil)
(setq auto-save-default nil)

(defun user--org-remove-property-drawers ()
  "After tangling, remove all :PROPERTIES: drawers."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^.*:PROPERTIES:$" nil t)
      (let ((start (line-beginning-position)))
	(when (re-search-forward "^.*:END:\n" nil t)
	  (delete-region start (point)))))
    (when (buffer-modified-p)
      (save-buffer))))
(add-hook 'org-babel-post-tangle-hook #'user--org-remove-property-drawers)

(defun org-babel-spec-to-string (spec)
  "Insert SPEC into the current file.

Insert the source-code specified by SPEC into the current source
code file.  This function uses `comment-region' which assumes
that the appropriate major-mode is set.  SPEC has the form:

  (start-line file link source-name params body comment)"
  (pcase-let*
      ((`(,start ,file ,link ,source ,info ,body ,comment) spec)
       (comments (cdr (assq :comments info)))
       (link? (or (string= comments "both") (string= comments "link")
		  (string= comments "yes") (string= comments "noweb")))
       (link-data `(("start-line" . ,(number-to-string start))
		    ("file" . ,file)
		    ("link" . ,link)
		    ("source-name" . ,source)))
       (insert-comment (lambda (text)
			 (when (and comments
				    (not (string= comments "no"))
				    (org-string-nw-p text))
			   (if org-babel-tangle-uncomment-comments
			       ;; Plain comments: no processing.
			       (insert text)
			     ;; Ensure comments are made to be comments.  Also ignore
			     ;; invisible characters when commenting.
			     (comment-region
			      (point)
			      (progn (insert (org-no-properties text))
				     (point))))))))
    (when comment (funcall insert-comment comment))
    (when link?
      (funcall insert-comment
	       (org-fill-template
		org-babel-tangle-comment-format-beg link-data)))
    (insert body "\n")
    (when link?
      (funcall insert-comment
	       (org-fill-template
		org-babel-tangle-comment-format-end link-data)))))

(defun tangle-headline-to-dest (name dest)
  (let (pos)
    (when (not (file-directory-p dest)) (error "Destination directory `%s' does not exist." dest))
    (org-with-wide-buffer
     (save-excursion
       (setq pos (org-find-exact-headline-in-buffer name (current-buffer) t))
       (when (null pos) (error "Heading named `%s' not found." name))
       (goto-char pos)
       (org-narrow-to-subtree)
       (org-babel-tangle)
       (when (not (file-exists-p name)) (error "Tangling `%s' did not build matching file." name))
       (rename-file name (concat (file-name-as-directory dest) name) t)))))

;; Silence messages.
(fset 'message (lambda (&rest args) nil))

(let ((org-file (pop argv))
      (heading-name (pop argv))
      (dest-dir (pop argv)))
  (with-current-buffer (find-file-noselect org-file)
    (tangle-headline-to-dest heading-name dest-dir)))
#+end_src

* packages.scm
:PROPERTIES:
:header-args+: :tangle packages.scm
:END:
** locale

- Guix package that provides utf8 locale.

#+name: locale
#+begin_src scheme
(use-modules (gnu packages base))
(define locale
  (make-glibc-utf8-locales
   glibc
   #:locales (list "en_US")
   #:name "glibc-en-utf8-locales"))
#+end_src

** elisp-packages

- List of Elisp guix packages.

#+name: elisp-packages
#+begin_src scheme
(use-modules (gnu packages emacs-xyz))
(define elisp-packages (list emacs-pcre2el emacs-package-lint))
#+end_src

** binaries

- List of Guix packages that provides binaries.

#+name: binaries
#+begin_src scheme
(use-modules
 (gnu packages base)
 (gnu packages bash)
 (gnu packages emacs)
 (gnu packages rust-apps)
 (gnu packages certs)
 (gnu packages admin)
 (gnu packages build-tools))

(define binaries
  (list

   ;; build dependencies
   ;; bash-minimal
   bash
   coreutils
   gnu-make
   emacs-minimal
   sed
   nss-certs

   ;; runtime dependencies
   ripgrep
   fd))
#+end_src

** ■

- List of Guix packages.

#+begin_src scheme
`(,locale ,@elisp-packages ,@binaries)
#+end_src

* init.bash
:PROPERTIES:
:header-args+: :tangle init.bash
:END:

- File that contains Bash environment variable declarations.

#+begin_src bash
export LC_ALL=en_US.UTF-8
#+end_src

* locs-and-refs.el
:PROPERTIES:
:header-args+: :tangle locs-and-refs.el
:END:

** Header

#+begin_src emacs-lisp
;;; locs-and-refs.el --- Define locations and references for files and buffers  -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2024 Pierre-Henry FRÖHRING
;; Author: Pierre-Henry FRÖHRING <contact@phfrohring.com>
;; Maintainer: Pierre-Henry FRÖHRING <contact@phfrohring.com>
;; Homepage: https://github.com/phf-1/locs-and-refs
;; Package-Version: 0.20
;; Package-Requires: ((emacs "27.1") (pcre2el "1.11"))
;; SPDX-License-Identifier: GPL-3.0-or-later
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This file is NOT part of GNU Emacs.
;;
;;; Commentary:
;;
;; <<commentary>>
;;
;;; Code:
#+end_src

** Dependencies

#+begin_src emacs-lisp
;; Dependencies
#+end_src

#+begin_src emacs-lisp
(require 'pcre2el)
(require 'org)
#+end_src

** Configuration

#+begin_src emacs-lisp
;; Configuration
#+end_src

#+begin_src emacs-lisp
(defgroup locs-and-refs nil
  "Customization options for locs-and-refs mode.
This mode provides functionality for handling locations and
references within text and programming buffers."
  :group 'convenience
  :prefix "locs-and-refs-")

(defcustom locs-and-refs-delay 1
  "Time in seconds after which locs-and-refs operations are applied.
This comes after buffer creation or modification."
  :type 'integer
  :group 'locs-and-refs)

(defcustom locs-and-refs-ripgrep-cmd "rg"
  "The name or path of the Ripgrep executable used for searching."
  :type 'string
  :group 'locs-and-refs)

(defcustom locs-and-refs-fd-cmd "fd"
  "The name or path of the fd executable used for searching."
  :type 'string
  :group 'locs-and-refs)

(defcustom locs-and-refs-root-dir (expand-file-name "~")
  "The root directory where Ripgrep searches for matches."
  :type 'string
  :group 'locs-and-refs)

(defface locs-and-refs-location-face
  '((t (:foreground "blue"
	:underline t)))
  "A custom face with customizable colors."
  :group 'locs-and-refs
  :tag "Face for locations")

(defcustom locs-and-refs-reference-tag "ref"
  "The tag used to identify references."
  :type 'string
  :group 'locs-and-refs)

(defface locs-and-refs-reference-face
  '((t (:foreground "red"
	:underline t)))
  "A custom face with customizable colors."
  :group 'locs-and-refs
  :tag "Face for references")

(defcustom locs-and-refs-results-buffer-prefix "L&R results"
  "The prefix used to identify results buffers."
  :type 'string
  :group 'locs-and-refs)
#+end_src

** Utils

#+begin_src emacs-lisp
;; Utils
#+end_src

*** truncate-right

#+begin_src emacs-lisp
(defun locs-and-refs--truncate-right (string &optional length ellipsis)
  "Truncate STRING to LENGTH characters, appending ELLIPSIS if truncated.
STRING is the string to truncate.
LENGTH specifies the number of characters to keep, defaulting to 20.
ELLIPSIS is appended to the truncated string, defaulting to ?….
Raises an error if STRING is not a string, LENGTH is not a positive integer,
or ELLIPSIS is not a character."
  (let ((len (or length 20))
	(ell (char-to-string (or ellipsis ?…))))
    (unless (stringp string) (error "`string' is not a string. string = %s" string))
    (unless (and (integerp len) (< 0 len)) (error "`len' is not a strict positive integer. len = %s" len))
    (concat (substring-no-properties string 0 len) ell)))
#+end_src

*** send

#+begin_src emacs-lisp
(defun locs-and-refs--send (obj msg)
  (let ((rcv (cl-struct-slot-value (type-of obj) 'rcv obj)))
    (funcall rcv obj msg)))
#+end_src

** LineFileMatch
*** Specification

#+begin_src emacs-lisp
;; An instance represents a match at a given line in some file.
#+end_src

*** Construction

#+begin_src emacs-lisp
(defun locs-and-refs--line-file-match-rcv (line-file-match msg)
  (let ((path (locs-and-refs--line-file-match-path line-file-match))
	(line (locs-and-refs--line-file-match-line line-file-match)))
    (pcase msg
      (:name
       (let ((name (file-name-nondirectory path)))
	 (format "%s" name)))

      (:action
       (lambda ()
	 (find-file path)
	 (save-restriction
	   (widen)
	   (goto-char (point-min))
	   (forward-line (1- line)))
	 (recenter)))

      (_ (error "Unexpected msg: %s" msg)))))

(cl-defstruct locs-and-refs--line-file-match
  "LineFileMatch data structure."
  path line rcv)

(defun locs-and-refs--line-file-match-mk (path line)
  "Create a LineFileMatch object with PATH and LINE.
PATH should be a valid file path, and LINE should be a
non-negative integer."
  (unless (stringp path) (error "PATH does not a string. %s" path))
  (unless (and (integerp line) (<= 0 line)) (error "LINE is not a positive integer"))
  (make-locs-and-refs--line-file-match :path path :line line :rcv #'locs-and-refs--line-file-match-rcv))
#+end_src

*** Usage
**** p
**** name

#+begin_src emacs-lisp
(defun locs-and-refs--line-file-match-name (match)
  (locs-and-refs--send match :name))
#+end_src

**** path
**** line

*** Verification
:PROPERTIES:
:header-args+: :tangle _build/locs-and-refs-test.el
:END:

#+begin_src emacs-lisp
(require 'ert)
(require 'locs-and-refs)
(ert-deftest line-file-match ()
  (let ((m (locs-and-refs--line-file-match-mk "/a/file" 12)))
    (should (locs-and-refs--line-file-match-p m))
    (should (string= (locs-and-refs--line-file-match-name m) "file"))
    (should (eq (locs-and-refs--line-file-match-line m) 12))))
#+end_src

** LineBufferMatch
*** Specification

#+begin_src emacs-lisp
;; LineBufferMatch
;;
;; An instance represents a match at a given line in some buffer.
#+end_src

*** Construction

#+begin_src emacs-lisp
(defun locs-and-refs--line-buffer-match-rcv (match msg)
  (let ((buffer (locs-and-refs--line-buffer-match-path match))
	(line (locs-and-refs--line-buffer-match-line match)))
    (pcase msg
      (:name
       (let ((name (buffer-name buffer)))
	 (format "%s" name)))

      (:action
       (lambda ()
	 (switch-to-buffer-other-window buffer)
	 (save-restriction
	   (widen)
	   (goto-char (point-min))
	   (forward-line (1- line)))
	 (recenter)))

      (_ (error "Unexpected msg: %s" msg)))))

(cl-defstruct locs-and-refs--line-buffer-match
  "LineBufferMatch data structure."
  buffer line rcv)

(defun locs-and-refs--line-buffer-match-mk (buffer line)
  "Create a LineBufferMatch object with BUFFER and LINE.
BUFFER should be a valid buffer, and LINE should be a
non-negative integer."
  (unless (bufferp buffer) (error "BUFFER does not exist"))
  (unless (and (integerp line) (<= 0 line)) (error "LINE is not a positive integer"))
  (make-locs-and-refs--line-buffer-match :buffer buffer :line line :rcv #'locs-and-refs--line-buffer-match-rcv))
#+end_src

*** Usage
**** p
**** name

#+begin_src emacs-lisp
(defun locs-and-refs--line-buffer-match-name (match)
  (locs-and-refs--send match :name))
#+end_src

**** buffer

**** line

*** Verification
** FileMatch
*** Specification

#+begin_src emacs-lisp
;; An instance represents a file match.
#+end_src

*** Construction

#+begin_src emacs-lisp
(defun locs-and-refs--file-match-rcv (file-match msg)
  (let ((path (locs-and-refs--file-match-path file-match)))
    (pcase msg
      (:name
       (let* ((name (locs-and-refs--truncate-right (file-name-nondirectory path)))
	      (ext (file-name-extension path)))
	 (format "%s.%s  %s" name ext path)))

      (:action
       (lambda ()
	 (find-file path)
	 (recenter)))

      (_ (error "MATCH %s is not a FileMatch or a LineFileMatch or a LineBufferMatch" msg)))))

(cl-defstruct locs-and-refs--file-match
  "FileMatch data structure."
  path rcv)

(defun locs-and-refs--file-match-mk (path)
  "Create a FileMatch object with PATH.
PATH should be a valid file path."
  (unless (file-exists-p path) (error "PATH does not exist"))
  (make-locs-and-refs--file-match :path path :rcv #'locs-and-refs--file-match-rcv))
#+end_src

*** Usage
**** p
**** name

#+begin_src emacs-lisp
(defun locs-and-refs--file-match-name (file-match)
  ""
  (locs-and-refs--file-match-rcv file-match :name))
#+end_src

**** path
*** Verification
** Match
*** Specification

#+begin_src emacs-lisp
;; Match
;;
;; An instance represents a match.
#+end_src

*** Construction
*** Usage
**** p
**** name

#+begin_src emacs-lisp
(defun locs-and-refs--match-name (match)
  ""
  (locs-and-refs--send match :name))
#+end_src

**** action

#+begin_src emacs-lisp
(defun locs-and-refs--match-action (match)
  ""
  (locs-and-refs--send match :action))
#+end_src

*** Verification
** Search
*** Specification

#+begin_src emacs-lisp
;; Search
;;
;; Given a RegEx in the form of an Rx expression,
;; search matching files/buffers/filenames.
#+end_src

*** Construction
*** Usage
**** files
:PROPERTIES:
:ID:       c630d94f-987c-420a-9ef7-c78211a8a813
:END:

#+begin_src emacs-lisp
(defun locs-and-refs--search-files (regex)
  "Search for REGEX in files under `locs-and-refs-root-dir' using Ripgrep.
Returns a list of LineFileMatch objects."
  (let* ((home-directory locs-and-refs-root-dir)
	 (pattern (rxt-elisp-to-pcre (rx-to-string regex)))
	 (command (format "%s -i --no-heading -n --color=never '%s' %s" locs-and-refs-ripgrep-cmd pattern home-directory))
	 matches)
    (with-temp-buffer
      (call-process-shell-command command nil `(,(current-buffer) nil) nil)
      (goto-char (point-min))
      (while (not (eobp))
	(let* ((line (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
	       (match (split-string line ":")))
	  (push (locs-and-refs--line-file-match-mk (nth 0 match) (string-to-number (nth 1 match))) matches))
	(forward-line 1)))
    matches))
#+end_src

**** buffers

#+begin_src emacs-lisp
(defun locs-and-refs--line-number ()
  "Return the current line number in the buffer."
  (save-excursion
    (save-restriction
      (widen)
      (line-number-at-pos))))

(defun locs-and-refs--search-buffers (regex)
  "Search for REGEX in all buffers.
Returns a list of LineBufferMatch objects."
  (let ((case-fold-search t) matches)
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
	(org-with-wide-buffer
	  (goto-char (point-min))
	  (while (re-search-forward (rx-to-string regex) nil t)
	    (push (locs-and-refs--line-buffer-match-mk buffer (locs-and-refs--line-number)) matches)))))
    matches))
#+end_src

**** filenames

#+begin_src emacs-lisp
(defun locs-and-refs--search-filenames (regex)
  "Search for REGEX in filenames under `locs-and-refs-root-dir' using fd.
Returns a list of FileMatch objects."
  (let* ((home-directory locs-and-refs-root-dir)
	 (pattern (rxt-elisp-to-pcre (rx-to-string regex)))
	 (command (format "%s -a '%s' '%s'" locs-and-refs-fd-cmd pattern home-directory))
	 matches)
    (with-temp-buffer
      (call-process-shell-command command nil `(,(current-buffer) nil) nil)
      (goto-char (point-min))
      (while (not (eobp))
	(let* ((line (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
	  (push (locs-and-refs--file-match-mk line) matches))
	(forward-line 1)))
    matches))
#+end_src

*** Verification
** RegEx
*** Specification

#+begin_src emacs-lisp
;; RegEx
;;
;; A few utilities.
#+end_src

*** Construction
**** content

#+begin_src emacs-lisp
(defun locs-and-refs--regex-content (tag &optional id)
  "Generate a regex pattern for matching content with TAG and optional ID.
ID can be either a string or a regex pattern."
  (let* ((this-id (or id '(1+ (not (or "\n" "]")))))
	 (property `(seq ":" (group ,tag) ":" (1+ space) (group ,this-id)))
	 (org-link `(seq "[[" (group ,tag) ":" (group ,this-id) "]" (opt "[" (group (0+ (not "]"))) "]") "]")))
    `(or ,property ,org-link)))
#+end_src

*** Usage
*** Verification
** Location
*** Specification

#+begin_src emacs-lisp
;; Location
;;
;; loc : Location represents a place that can be referenced.
;; A click on loc shows all references to it.
#+end_src

*** Configuration
**** tag

#+begin_src emacs-lisp
(defcustom locs-and-refs-location-tag "id"
  "The tag used to identify locations."
  :type 'string
  :group 'locs-and-refs)
#+end_src

*** Construction

#+begin_src emacs-lisp

(defun locs-and-refs--location-rcv (loc msg)
  (let ()
    (pcase msg
      (:todo :todo))))

(cl-defstruct locs-and-refs--location
  "Location data structure."
  id buffer start end name rcv)

(defun locs-and-refs--location-mk (id buffer start end &optional name)
  "Create a Location object with ID, BUFFER, START, END and NAME.
ID is a string, BUFFER must be a buffer object, START and END are
integer positions. NAME is an optional string."
  (unless (stringp id) (error "ID is not a string"))
  (unless (bufferp buffer) (error "BUFFER is not a buffer"))
  (unless (integerp start) (error "START is not an integer"))
  (unless (integerp end) (error "END is not an integer"))
  (let (button loc display-name)
    (setq display-name
	  (apply #'propertize
		 `(,(substring-no-properties (or name (concat ":" (upcase locs-and-refs-location--tag) ": " id)))
		   face locs-and-refs-location-face)))
    (setq button
	  (with-current-buffer buffer
	    (let ((inhibit-modification-hooks t))
	      (make-button start end
			   'action (lambda (_button) (locs-and-refs--location-click loc))
			   'lar t
			   'display display-name
			   'help-echo (format "Click to open %s" id)
			   'follow-link t))))

    (setq loc (make-locs-and-refs--location :id id
					    :buffer buffer
					    :start start
					    :end end
					    :button button
					    :name name
					    :rcv #'locs-and-refs--location-rcv))
    loc))
#+end_src

*** Usage
**** p

**** id

**** content-regex

#+begin_src emacs-lisp
(defun locs-and-refs--location-content-regex (loc)
  "Generate a regex for content of a Location with LOC's ID."
  (locs-and-refs--send loc :content-regex))
#+end_src

#+begin_src emacs-lisp
(defun locs-and-refs--location-content-regex (loc)
  "Generate a regex for content of a Location with LOC's ID."
  (locs-and-refs--regex-content (locs-and-refs--reference-tag) (locs-and-refs--location-id loc)))
#+end_src

**** regex

#+begin_src emacs-lisp
(defun locs-and-refs--location-regex (&optional _loc)
  "Return the regex pattern for matching locations."
  (locs-and-refs--regex-content locs-and-refs-location-tag))
#+end_src

**** click

#+begin_src emacs-lisp
(defun locs-and-refs--location-click (loc)
  "Show references in a new buffer after a click on location LOC."
  (locs-and-refs--send loc :click))
#+end_src

- Location → Buffer
- λ loc :≡
  - content-regex  :≡ content-regex(loc)
  - file-matches   :≡ search-files(content-regex)
  - buffer-matches :≡ search-buffers(content-regex)
  - matches        :≡ file-matches + buffer-matches
  - ui-matches(matches id(loc) tag(loc))

#+begin_src emacs-lisp
(defun locs-and-refs--location-click (loc)
  "Show references in a new buffer after a click on location LOC."
  (let* ((content-regex (locs-and-refs--location-content-regex loc))
	 (file-matches (locs-and-refs--search-files content-regex))
	 (buffer-matches (locs-and-refs--search-buffers content-regex))
	 (matches (append file-matches buffer-matches))
	 (id (locs-and-refs--location-id loc)))
    (locs-and-refs--ui-matches matches id locs-and-refs-location--tag)))
#+end_src

*** use

#+begin_src emacs-lisp
(defun locs-and-refs--location-use (func)
  "Apply FUNC to the ID of a Location object."
  (lambda (loc)
    (unless (locs-and-refs--location-p loc) (error "LOC is not a Location"))
    (apply func (cdr loc))))
#+end_src

*** Verification
** Reference
*** Specification
*** Construction
*** Usage
*** Verification

An instance define a reference to a Location.
A click on an instance shows all locations that it refers to.
#+begin_src emacs-lisp
#+end_src

*** mk

- Id Buffer Start End Name → Reference

#+begin_src emacs-lisp
(defun locs-and-refs--reference-mk (id buffer start end &optional name)
  "Create a Reference object with ID, BUFFER, START, END and NAME.
ID is a string, BUFFER must be a buffer object, START and END are
integer positions. NAME is an optional string."
  (unless (stringp id) (error "ID is not a string"))
  (unless (bufferp buffer) (error "BUFFER is not a buffer"))
  (unless (integerp start) (error "START is not an integer"))
  (unless (integerp end) (error "END is not an integer"))
  (let (button ref display-name)
    (setq display-name
	  (apply #'propertize
		   `(,(substring-no-properties (or name (concat ":" (upcase locs-and-refs-reference-tag) ": " id)))
		     face locs-and-refs-reference-face)))
    (setq button
	  (with-current-buffer buffer
	    (let ((inhibit-modification-hooks t))
	      (make-button start end
			 'action (lambda (_button) (locs-and-refs--reference-click ref))
			 'lar t
			 'display display-name
			 'help-echo (format "Click to open %s" id)
			 'follow-link t))))
    (setq ref (list :reference id buffer start end button name))
    ref))
#+end_src

*** p

- Any → Boolean

#+begin_src emacs-lisp
(defun locs-and-refs--reference-p (ref)
  "Check if REF is a Reference object."
  (eq (car-safe ref) :reference))
#+end_src

*** use

- (String → C) → Reference → C

#+begin_src emacs-lisp
(defun locs-and-refs--reference-use (func)
  "Apply FUNC to the ID of a Reference object."
  (lambda (ref)
    (unless (locs-and-refs--reference-p ref) (error "REF is not a Reference"))
    (apply func (cdr ref))))
#+end_src

*** id

- Reference → String

#+begin_src emacs-lisp
(defun locs-and-refs--reference-id (ref)
  "Extract the ID from a REF object."
  (funcall (locs-and-refs--reference-use (lambda (id &rest _args) id)) ref))
#+end_src

*** tag

- String

#+begin_src emacs-lisp
(defun locs-and-refs--reference-tag ()
  "Return the tag used for identifying references."
  locs-and-refs-reference-tag)
#+end_src

*** content-regex

- Reference → RegEx

#+begin_src emacs-lisp
(defun locs-and-refs--reference-content-regex (ref)
  "Generate a regex for content of a Reference with REF's ID."
  (locs-and-refs--regex-content locs-and-refs-location-tag (locs-and-refs--reference-id ref)))
#+end_src

*** regex

- Regex

#+begin_src emacs-lisp
(defun locs-and-refs--reference-regex ()
  "Return the regex pattern for matching references."
  (locs-and-refs--regex-content (locs-and-refs--reference-tag)))
#+end_src

*** filename-regex

- Reference → RegEx

#+begin_src emacs-lisp
(defun locs-and-refs--reference-filename-regex (ref)
  "Generate a regex for matching filenames with REF's ID."
  `(seq ,(locs-and-refs--reference-id ref)))
#+end_src

*** click

- Reference → Buffer
- click ref :≡
  - content-regex    :≡ content-regex(ref)
  - file-matches     :≡ search-files(content-regex)
  - buffer-matches   :≡ search-buffers(content-regex)
  - filename-matches :≡ search-filenames(filename-regex)
  - matches          :≡ file-matches + buffer-matches + filename-matches
  - ui-matches(matches id(ref) tag(ref))

#+begin_src emacs-lisp
(defun locs-and-refs--reference-click (ref)
  "Show matching locations in a new buffer after a click on a reference REF."
  (let* ((content-regex (locs-and-refs--reference-content-regex ref))
	 (file-matches (locs-and-refs--search-files content-regex))
	 (buffer-matches (locs-and-refs--search-buffers content-regex))
	 (filename-matches (locs-and-refs--search-filenames (locs-and-refs--reference-filename-regex ref)))
	 (matches (append file-matches buffer-matches filename-matches))
	 (id (locs-and-refs--reference-id ref)))
    (locs-and-refs--ui-matches matches id locs-and-refs-reference-tag)))
#+end_src

** UI
*** Specification
*** Construction
*** Usage
*** Verification
*** insert-button

- Name Action → Button

#+begin_src emacs-lisp
(defun locs-and-refs--ui-insert-button (name action tag)
  "Insert a clickable button with NAME and ACTION in the current buffer.
The face depends on TAG."
  (insert-button name
		 'action (lambda (_button) (funcall action))
		 'lar t
		 'face (cond
			((string= tag locs-and-refs-location-tag)
			 'locs-and-refs-reference-face)
			((string= tag (locs-and-refs--reference-tag))
			 'locs-and-refs-location-face))
		 'help-echo (format "Click to open %s" name)
		 'follow-link t))
#+end_src

*** matches

- List(Match) Id Tag → Buffer

#+begin_src emacs-lisp
(defun locs-and-refs--ui-matches (matches id tag)
  "Display MATCHES for ID from TAG in a buffer.
Opens a new dedicated frame and switches to the buffer in that frame.
For each match, a button is inserted in the buffer.
A click on a button opens the associated file."
  (let* ((buffer (with-current-buffer (generate-new-buffer locs-and-refs-results-buffer-prefix)
		   (setq buffer-read-only nil)
		   (erase-buffer)
		   (insert
		    (cond
		     ((string= tag locs-and-refs-location-tag)
		      (format "List of references to the location: %S\n\n" (substring-no-properties id)))
		     ((string= tag (locs-and-refs--reference-tag))
		      (format "List of locations with id: %S\n\n" (substring-no-properties id)))))
		   (setq buffer-read-only t)
		   (current-buffer)))
	 (insert-button
	  (lambda (match)
	    (with-current-buffer buffer
	      (locs-and-refs--ui-insert-button
	       (locs-and-refs--match-name match)
	       (locs-and-refs--match-action match)
	       tag)
	      (insert "\n")))))
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (let (line-buffer-matches line-file-matches file-matches)
	(setq file-matches
	      (alist-get t (seq-group-by #'locs-and-refs--file-match-p matches)))

	(setq line-file-matches
	      (alist-get t (seq-group-by #'locs-and-refs--line-file-match-p matches)))

	(setq line-buffer-matches
	      (alist-get t (seq-group-by #'locs-and-refs--line-buffer-match-p matches)))

	(when line-buffer-matches
	  (insert "* Lines that matched in buffers\n\n")
	  (mapc insert-button line-buffer-matches)
	  (insert "\n"))

	(when line-file-matches
	  (insert "* Lines that matched in files\n\n")
	  (mapc insert-button line-file-matches)
	  (insert "\n"))

	(when file-matches
	  (insert "* Files that matched by name\n\n")
	  (mapc insert-button file-matches)
	  (insert "\n")))
      (setq buffer-read-only t))
    (let* ((frame (make-frame `((name . ,locs-and-refs-results-buffer-prefix)
				(dedicated . t))))
	   (window (frame-root-window frame)))
      (set-window-buffer window buffer)
      (set-window-dedicated-p window t))
    buffer))
#+end_src

** Minor mode

#+begin_src emacs-lisp
(defun locs-and-refs--stop-buffer ()
  (remove-overlays nil nil 'lar t)
  (when locs-and-refs--timer
    (cancel-timer locs-and-refs--timer)
    (kill-local-variable 'locs-and-refs--timer)))
#+end_src

#+begin_src emacs-lisp
(defvar locs-and-refs--timer nil
  "Record the last time the buffer has been modified.")
(put 'locs-and-refs--timer 'permanent-local t)

(defun locs-and-refs--check-ripgrep ()
  "Check if Ripgrep (rg) is installed and available."
  (unless (executable-find locs-and-refs-ripgrep-cmd)
    (user-error "Ripgrep (rg) is not installed. Please install it to use this package")))

(defun locs-and-refs--check-fd ()
  "Check if fd is installed and available."
  (unless (executable-find locs-and-refs-fd-cmd)
    (user-error "Fd (fd) is not installed. Please install it to use this package")))

(defun locs-and-refs--mutated (_a _b _c)
  "Handle buffer mutations for locs-and-refs mode."
  (let ((buffer (current-buffer)))
    (with-current-buffer buffer
      (when locs-and-refs--timer (cancel-timer locs-and-refs--timer))
      (setq-local locs-and-refs--timer
		  (run-with-idle-timer
		   locs-and-refs-delay
		   nil
		   (lambda ()
		     (when (buffer-live-p buffer)
		       (locs-and-refs--start-buffer buffer))))))))

(defun locs-and-refs--delete-search-results-buffer (frame)
  "Kill L&R search buffers associated with FRAME."
  (let ((prefix locs-and-refs-results-buffer-prefix))
    (dolist (buffer (frame-parameter frame 'buffer-list))
      (when (and (buffer-live-p buffer)
		 (string-prefix-p prefix (buffer-name buffer)))
	(kill-buffer buffer)))))
#+end_src

#+begin_src emacs-lisp
(defun locs-and-refs--regex-groups ()
  "Extract groups from the last regex match."
  (let (groups)
    (dotimes (i (/ (length (match-data)) 2))
      (when (> i 0)
	(let ((group (match-string i)))
	  (when group (push group groups)))))
    (nreverse groups)))

(defun locs-and-refs--start-buffer (&optional buffer)
  "Activate locs-and-refs functionality for BUFFER or the current buffer."
  (let* ((this-buffer (or buffer (current-buffer)))
	 (loc-regex (locs-and-refs--location-regex))
	 (loc-tag locs-and-refs-location-tag)
	 (ref-tag (locs-and-refs--reference-tag))
	 (ref-regex (locs-and-refs--reference-regex))
	 (regex (rx-to-string `(or ,loc-regex ,ref-regex)))
	 (case-fold-search t)
	 groups tag id name)
    (with-current-buffer this-buffer
      (when (derived-mode-p 'text-mode 'prog-mode)
	(save-excursion
	  (dolist (ov (overlays-in (point-min) (point-max)))
	    (when (overlay-get ov 'lar) (delete-overlay ov)))
	  (goto-char (point-min))
	  (save-match-data
	    (while (re-search-forward regex nil t)
	      (setq groups (locs-and-refs--regex-groups))
	      (setq tag (car groups))
	      (setq id (seq-find #'identity (cdr groups)))
	      (setq name (nth 2 groups))
	      (cond
	       ((string= (downcase tag) loc-tag)
		(locs-and-refs--location-mk
		 id
		 this-buffer
		 (match-beginning 0)
		 (match-end 0)
		 name))
	       ((string= (downcase tag) ref-tag)
		(locs-and-refs--reference-mk
		 id
		 this-buffer
		 (match-beginning 0)
		 (match-end 0)
		 name))))))))))
#+end_src


#+begin_src emacs-lisp
(defun locs-and-refs--start ()
  "Start locs-and-refs minor mode.
For all buffers or new buffers, start a locs-and-refs process."
  (mapcar #'locs-and-refs--start-buffer (buffer-list))
  (add-hook 'after-change-major-mode-hook #'locs-and-refs--start-buffer))
#+end_src

#+begin_src emacs-lisp
(defun locs-and-refs--stop ()
  "Stop locs-and-refs minor mode.
For all new buffers, do not start an associated locs-and-refs process.
For all buffers, stop the associated locs-and-refs process."
  (remove-hook 'after-change-major-mode-hook #'locs-and-refs--start-buffer)
  (mapcar #'locs-and-refs--stop-buffer (buffer-list)))
#+end_src

#+begin_src emacs-lisp
;;;###autoload
(define-minor-mode locs-and-refs-mode
  "Locations and References for Emacs.

<<commentary>>"
  :init-value nil
  :lighter " L&R"
  :keymap nil
  :group 'locs-and-refs
  :global t
  (if locs-and-refs-mode
      (locs-and-refs--start)
    (locs-and-refs--stop)))
#+end_src

** Footer

#+begin_src emacs-lisp
(provide 'locs-and-refs)

;;; locs-and-refs.el ends here

;; Local Variables:
;; coding: utf-8
;; byte-compile-docstring-max-column: 80
;; require-final-newline: t
;; sentence-end-double-space: nil
;; indent-tabs-mode: nil
;; End:
#+end_src

* Makefile
:PROPERTIES:
:header-args+: :tangle Makefile
:END:
** Configuration

- List of Makefile configurations.

#+begin_src makefile
SHELL := bash
.SHELLFLAGS := -ceuo pipefail
MAKEFLAGS += --no-print-directory
.ONESHELL:
.SILENT:
#+end_src

** help

- make help # Print this help.

#+begin_src makefile
.PHONY: help
help:
	grep '^# - make ' $(MAKEFILE_LIST) | sed 's/^# - make //' | awk 'BEGIN {FS = " # "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
#+end_src

** BUILD

- ${BUILD} is the directory under which all generated files are installed.

#+begin_src makefile
BUILD := _build
${BUILD}:
	mkdir -p $@
#+end_src

** TRACE

- ${TRACE} is a file used to record an execution trace.

#+begin_src makefile
TRACE := ${BUILD}/trace.txt
#+end_src

** TRAP

- ${TRAP} If something has been written to ${TRACE}, then consider that the rule failed.

#+begin_src makefile
TRAP := > ${TRACE}; trap 'if [[ $$? -ne 0 ]]; then cat ${TRACE}; fi' EXIT
#+end_src

** MAIN_ORG

- ${MAIN_ORG} is the path to source file.

#+begin_src makefile
MAIN_ORG := README.org
#+end_src

** tangle-heading

- make tangle-heading # Returns the path to the updated ./tangle-heading script.

#+begin_src makefile
.PHONY: tangle-heading
TANGLE_HEADING := ${BUILD}/tangle-heading
tangle-heading: ${TANGLE_HEADING}
${TANGLE_HEADING}: ${MAIN_ORG} | ${BUILD}
	${TRAP}
	./tangle-heading ${MAIN_ORG} tangle-heading ${BUILD} &> ${TRACE}
	cp -vf ${BUILD}/tangle-heading ./tangle-heading &>> ${TRACE}
	tail -n 1 ${TRACE}
#+end_src

** Makefile

- make Makefile # Returns the path to the updated ./Makefile.

#+begin_src makefile
.PHONY: Makefile
MAKEFILE := ${BUILD}/Makefile
Makefile: ${MAKEFILE}
${MAKEFILE}: ${MAIN_ORG} | ${BUILD}
	${TRAP}
	./tangle-heading ${MAIN_ORG} Makefile ${BUILD} &> ${TRACE}
	cp -vf ${BUILD}/Makefile ./Makefile &>> ${TRACE}
	tail -n 1 ${TRACE}
#+end_src

** packages.scm

- make packages.scm # Returns the path to the Guix packages available in the environment.

#+begin_src makefile
.PHONY: packages.scm
PACKAGES_SCM := ${BUILD}/packages.scm
packages.scm: ${PACKAGES_SCM}
${PACKAGES_SCM}: ${MAIN_ORG} | ${BUILD}
	${TRAP}
	./tangle-heading ${MAIN_ORG} packages.scm ${BUILD} &> ${TRACE}
	echo "$@"
#+end_src

** init.bash

- make init.bash # Returns the path to parameters that initialize Bash in the environment.

#+begin_src makefile
.PHONY: init.bash
INIT_BASH := ${BUILD}/init.bash
init.bash: ${INIT_BASH}
${INIT_BASH}: ${MAIN_ORG} | ${BUILD}
	${TRAP}
	./tangle-heading ${MAIN_ORG} init.bash ${BUILD} &> ${TRACE}
	echo "$@"
#+end_src

** env

- make env # Starts the environment.

#+begin_src makefile
.PHONY: env
GUIX := guix
GUIX_SHELL := ${GUIX} shell --container \
	-F \
	-N \
	--file=${PACKAGES_SCM} \
	--preserve='^TERM$$' \
	-- bash --init-file ${INIT_BASH}
env: ${PACKAGES_SCM} ${INIT_BASH}
	CMD="${CMD}"
	if [[ ! -v GUIX_ENVIRONMENT ]]; then
	  if [[ "$${CMD}" == "" ]]; then
	    ${GUIX_SHELL} -i;
	  else
	    ${GUIX_SHELL} -c "${CMD}";
	  fi
	else
	  ${CMD}
	  :
	fi
#+end_src

** el

- make el # Returns the path to the elisp package.

#+begin_src makefile
.PHONY: el
LOCS_AND_REFS_EL := ${BUILD}/locs-and-refs.el
el: ${LOCS_AND_REFS_EL}
${LOCS_AND_REFS_EL}: ${MAIN_ORG} | ${BUILD}
	${TRAP}
	./tangle-heading ${MAIN_ORG} locs-and-refs.el ${BUILD} &> ${TRACE}
	[[ -s ${TRACE} ]] && exit 1
	echo "$@"
#+end_src

** elc

- make elc # Returns the path to the compiled elisp package.

#+begin_src makefile
.PHONY: elc
LOCS_AND_REFS_ELC := ${BUILD}/locs-and-refs.elc
elc: ${LOCS_AND_REFS_ELC}
${LOCS_AND_REFS_ELC}: ${LOCS_AND_REFS_EL}
	${TRAP}
	emacs -Q --batch \
	--eval '(setq org-id-track-globally nil)' \
	--eval '(defun reb-target-binding (_sym) (error "pcre2el v1.11"))' \
	-f batch-byte-compile $< &> ${TRACE}
	[[ -s ${TRACE} ]] && exit 1
	echo "$@"
#+end_src

** lint

- make lint # Returns the path to the linting report of the elisp package.

#+begin_src makefile
.PHONY: lint
LINT_REPORT := ${BUILD}/lint-report.txt
lint: ${LINT_REPORT}
${LINT_REPORT}: ${LOCS_AND_REFS_EL}
	${TRAP}
	emacs --batch \
	--file $< \
	--eval '(setq org-id-track-globally nil)' \
	--eval "(progn (require 'package) (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t) (package-initialize))" \
	--eval "(progn (require 'package-lint) (let ((errors (package-lint-buffer))) (when errors (message \"%s\" errors))))" &> ${TRACE}
	[[ -s ${TRACE} ]] && exit 1
	echo "$@"
#+end_src

** checkdoc

- make checkdoc # Returns the path to the analysis of the docstrings of the elisp package.

#+begin_src makefile
.PHONY: checkdoc
CHECKDOC := ${BUILD}/checkdoc.txt
checkdoc: ${CHECKDOC}
${CHECKDOC}: ${LOCS_AND_REFS_EL}
	${TRAP}
	emacs -Q --batch \
	--eval '(setq org-id-track-globally nil)' \
	--eval '(checkdoc-file "$<")' &> ${TRACE}
	[[ -s ${TRACE} ]] && exit 1
	echo "$@"
#+end_src

** test

- make test # Returns the path to the analysis of the docstrings of the elisp package.

#+begin_src makefile
.PHONY: test
TEST := ${BUILD}/test-log.txt
LOCS_AND_REFS_TEST_EL := ${BUILD}/locs-and-refs-test.el
test: ${TEST}
${TEST}: ${LOCS_AND_REFS_TEST_EL}
	${TRAP}
	emacs -Q --batch \
	-L ${BUILD} \
	--eval '(setq org-id-track-globally nil)' \
	--eval '(load-file "$<")' \
	--eval '(ert-run-tests-batch-and-exit t)' &> $@
	echo "$@"

${LOCS_AND_REFS_TEST_EL}: ${MAIN_ORG} | ${BUILD}
	${TRAP}
	./tangle-heading ${MAIN_ORG} locs-and-refs.el ${BUILD} &> ${TRACE}
	[[ -s ${TRACE} ]] && exit 1
	echo "$@"
#+end_src

** all

- make all # Returns the path of the elisp package after lint, checkdoc and elc steps.

#+begin_src makefile
.PHONY: all
all: ${BUILD}
	${TRAP}
	${MAKE} env CMD="${MAKE} lint checkdoc elc" &> ${TRACE}
	echo ${LOCS_AND_REFS_EL}
#+end_src

** clean

- make clean # Deletes all generated files.

#+begin_src makefile
.PHONY: clean
clean:
	rm -rfv ${BUILD}
#+end_src
